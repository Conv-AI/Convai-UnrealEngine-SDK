// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_service_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_service_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_service_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_service_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_service_2eproto;
namespace service {
class ActionConfig;
class ActionConfigDefaultTypeInternal;
extern ActionConfigDefaultTypeInternal _ActionConfig_default_instance_;
class ActionConfig_Character;
class ActionConfig_CharacterDefaultTypeInternal;
extern ActionConfig_CharacterDefaultTypeInternal _ActionConfig_Character_default_instance_;
class ActionConfig_Object;
class ActionConfig_ObjectDefaultTypeInternal;
extern ActionConfig_ObjectDefaultTypeInternal _ActionConfig_Object_default_instance_;
class AudioConfig;
class AudioConfigDefaultTypeInternal;
extern AudioConfigDefaultTypeInternal _AudioConfig_default_instance_;
class GetResponseRequest;
class GetResponseRequestDefaultTypeInternal;
extern GetResponseRequestDefaultTypeInternal _GetResponseRequest_default_instance_;
class GetResponseRequest_GetResponseConfig;
class GetResponseRequest_GetResponseConfigDefaultTypeInternal;
extern GetResponseRequest_GetResponseConfigDefaultTypeInternal _GetResponseRequest_GetResponseConfig_default_instance_;
class GetResponseRequest_GetResponseData;
class GetResponseRequest_GetResponseDataDefaultTypeInternal;
extern GetResponseRequest_GetResponseDataDefaultTypeInternal _GetResponseRequest_GetResponseData_default_instance_;
class GetResponseResponse;
class GetResponseResponseDefaultTypeInternal;
extern GetResponseResponseDefaultTypeInternal _GetResponseResponse_default_instance_;
class GetResponseResponse_ActionResponse;
class GetResponseResponse_ActionResponseDefaultTypeInternal;
extern GetResponseResponse_ActionResponseDefaultTypeInternal _GetResponseResponse_ActionResponse_default_instance_;
class GetResponseResponse_AudioResponse;
class GetResponseResponse_AudioResponseDefaultTypeInternal;
extern GetResponseResponse_AudioResponseDefaultTypeInternal _GetResponseResponse_AudioResponse_default_instance_;
class GetResponseResponse_UserTranscript;
class GetResponseResponse_UserTranscriptDefaultTypeInternal;
extern GetResponseResponse_UserTranscriptDefaultTypeInternal _GetResponseResponse_UserTranscript_default_instance_;
class HelloRequest;
class HelloRequestDefaultTypeInternal;
extern HelloRequestDefaultTypeInternal _HelloRequest_default_instance_;
class HelloResponse;
class HelloResponseDefaultTypeInternal;
extern HelloResponseDefaultTypeInternal _HelloResponse_default_instance_;
class STTRequest;
class STTRequestDefaultTypeInternal;
extern STTRequestDefaultTypeInternal _STTRequest_default_instance_;
class STTResponse;
class STTResponseDefaultTypeInternal;
extern STTResponseDefaultTypeInternal _STTResponse_default_instance_;
}  // namespace service
PROTOBUF_NAMESPACE_OPEN
template<> ::service::ActionConfig* Arena::CreateMaybeMessage<::service::ActionConfig>(Arena*);
template<> ::service::ActionConfig_Character* Arena::CreateMaybeMessage<::service::ActionConfig_Character>(Arena*);
template<> ::service::ActionConfig_Object* Arena::CreateMaybeMessage<::service::ActionConfig_Object>(Arena*);
template<> ::service::AudioConfig* Arena::CreateMaybeMessage<::service::AudioConfig>(Arena*);
template<> ::service::GetResponseRequest* Arena::CreateMaybeMessage<::service::GetResponseRequest>(Arena*);
template<> ::service::GetResponseRequest_GetResponseConfig* Arena::CreateMaybeMessage<::service::GetResponseRequest_GetResponseConfig>(Arena*);
template<> ::service::GetResponseRequest_GetResponseData* Arena::CreateMaybeMessage<::service::GetResponseRequest_GetResponseData>(Arena*);
template<> ::service::GetResponseResponse* Arena::CreateMaybeMessage<::service::GetResponseResponse>(Arena*);
template<> ::service::GetResponseResponse_ActionResponse* Arena::CreateMaybeMessage<::service::GetResponseResponse_ActionResponse>(Arena*);
template<> ::service::GetResponseResponse_AudioResponse* Arena::CreateMaybeMessage<::service::GetResponseResponse_AudioResponse>(Arena*);
template<> ::service::GetResponseResponse_UserTranscript* Arena::CreateMaybeMessage<::service::GetResponseResponse_UserTranscript>(Arena*);
template<> ::service::HelloRequest* Arena::CreateMaybeMessage<::service::HelloRequest>(Arena*);
template<> ::service::HelloResponse* Arena::CreateMaybeMessage<::service::HelloResponse>(Arena*);
template<> ::service::STTRequest* Arena::CreateMaybeMessage<::service::STTRequest>(Arena*);
template<> ::service::STTResponse* Arena::CreateMaybeMessage<::service::STTResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace service {

// ===================================================================

class AudioConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service.AudioConfig) */ {
 public:
  inline AudioConfig() : AudioConfig(nullptr) {}
  virtual ~AudioConfig();

  AudioConfig(const AudioConfig& from);
  AudioConfig(AudioConfig&& from) noexcept
    : AudioConfig() {
    *this = ::std::move(from);
  }

  inline AudioConfig& operator=(const AudioConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioConfig& operator=(AudioConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AudioConfig& default_instance();

  static inline const AudioConfig* internal_default_instance() {
    return reinterpret_cast<const AudioConfig*>(
               &_AudioConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AudioConfig& a, AudioConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AudioConfig* New() const final {
    return CreateMaybeMessage<AudioConfig>(nullptr);
  }

  AudioConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AudioConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AudioConfig& from);
  void MergeFrom(const AudioConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service.AudioConfig";
  }
  protected:
  explicit AudioConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_service_2eproto);
    return ::descriptor_table_service_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSampleRateHertzFieldNumber = 1,
  };
  // int32 sample_rate_hertz = 1;
  void clear_sample_rate_hertz();
  ::PROTOBUF_NAMESPACE_ID::int32 sample_rate_hertz() const;
  void set_sample_rate_hertz(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sample_rate_hertz() const;
  void _internal_set_sample_rate_hertz(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:service.AudioConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 sample_rate_hertz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class ActionConfig_Character PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service.ActionConfig.Character) */ {
 public:
  inline ActionConfig_Character() : ActionConfig_Character(nullptr) {}
  virtual ~ActionConfig_Character();

  ActionConfig_Character(const ActionConfig_Character& from);
  ActionConfig_Character(ActionConfig_Character&& from) noexcept
    : ActionConfig_Character() {
    *this = ::std::move(from);
  }

  inline ActionConfig_Character& operator=(const ActionConfig_Character& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActionConfig_Character& operator=(ActionConfig_Character&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActionConfig_Character& default_instance();

  static inline const ActionConfig_Character* internal_default_instance() {
    return reinterpret_cast<const ActionConfig_Character*>(
               &_ActionConfig_Character_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ActionConfig_Character& a, ActionConfig_Character& b) {
    a.Swap(&b);
  }
  inline void Swap(ActionConfig_Character* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActionConfig_Character* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActionConfig_Character* New() const final {
    return CreateMaybeMessage<ActionConfig_Character>(nullptr);
  }

  ActionConfig_Character* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActionConfig_Character>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActionConfig_Character& from);
  void MergeFrom(const ActionConfig_Character& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActionConfig_Character* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service.ActionConfig.Character";
  }
  protected:
  explicit ActionConfig_Character(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_service_2eproto);
    return ::descriptor_table_service_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kBioFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string bio = 2;
  void clear_bio();
  const std::string& bio() const;
  void set_bio(const std::string& value);
  void set_bio(std::string&& value);
  void set_bio(const char* value);
  void set_bio(const char* value, size_t size);
  std::string* mutable_bio();
  std::string* release_bio();
  void set_allocated_bio(std::string* bio);
  private:
  const std::string& _internal_bio() const;
  void _internal_set_bio(const std::string& value);
  std::string* _internal_mutable_bio();
  public:

  // @@protoc_insertion_point(class_scope:service.ActionConfig.Character)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class ActionConfig_Object PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service.ActionConfig.Object) */ {
 public:
  inline ActionConfig_Object() : ActionConfig_Object(nullptr) {}
  virtual ~ActionConfig_Object();

  ActionConfig_Object(const ActionConfig_Object& from);
  ActionConfig_Object(ActionConfig_Object&& from) noexcept
    : ActionConfig_Object() {
    *this = ::std::move(from);
  }

  inline ActionConfig_Object& operator=(const ActionConfig_Object& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActionConfig_Object& operator=(ActionConfig_Object&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActionConfig_Object& default_instance();

  static inline const ActionConfig_Object* internal_default_instance() {
    return reinterpret_cast<const ActionConfig_Object*>(
               &_ActionConfig_Object_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ActionConfig_Object& a, ActionConfig_Object& b) {
    a.Swap(&b);
  }
  inline void Swap(ActionConfig_Object* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActionConfig_Object* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActionConfig_Object* New() const final {
    return CreateMaybeMessage<ActionConfig_Object>(nullptr);
  }

  ActionConfig_Object* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActionConfig_Object>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActionConfig_Object& from);
  void MergeFrom(const ActionConfig_Object& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActionConfig_Object* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service.ActionConfig.Object";
  }
  protected:
  explicit ActionConfig_Object(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_service_2eproto);
    return ::descriptor_table_service_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // @@protoc_insertion_point(class_scope:service.ActionConfig.Object)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class ActionConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service.ActionConfig) */ {
 public:
  inline ActionConfig() : ActionConfig(nullptr) {}
  virtual ~ActionConfig();

  ActionConfig(const ActionConfig& from);
  ActionConfig(ActionConfig&& from) noexcept
    : ActionConfig() {
    *this = ::std::move(from);
  }

  inline ActionConfig& operator=(const ActionConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActionConfig& operator=(ActionConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActionConfig& default_instance();

  static inline const ActionConfig* internal_default_instance() {
    return reinterpret_cast<const ActionConfig*>(
               &_ActionConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ActionConfig& a, ActionConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ActionConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActionConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActionConfig* New() const final {
    return CreateMaybeMessage<ActionConfig>(nullptr);
  }

  ActionConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActionConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActionConfig& from);
  void MergeFrom(const ActionConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActionConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service.ActionConfig";
  }
  protected:
  explicit ActionConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_service_2eproto);
    return ::descriptor_table_service_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ActionConfig_Character Character;
  typedef ActionConfig_Object Object;

  // accessors -------------------------------------------------------

  enum : int {
    kActionsFieldNumber = 1,
    kCharactersFieldNumber = 2,
    kObjectsFieldNumber = 3,
    kClassificationFieldNumber = 4,
    kContextLevelFieldNumber = 5,
  };
  // repeated string actions = 1;
  int actions_size() const;
  private:
  int _internal_actions_size() const;
  public:
  void clear_actions();
  const std::string& actions(int index) const;
  std::string* mutable_actions(int index);
  void set_actions(int index, const std::string& value);
  void set_actions(int index, std::string&& value);
  void set_actions(int index, const char* value);
  void set_actions(int index, const char* value, size_t size);
  std::string* add_actions();
  void add_actions(const std::string& value);
  void add_actions(std::string&& value);
  void add_actions(const char* value);
  void add_actions(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& actions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_actions();
  private:
  const std::string& _internal_actions(int index) const;
  std::string* _internal_add_actions();
  public:

  // repeated .service.ActionConfig.Character characters = 2;
  int characters_size() const;
  private:
  int _internal_characters_size() const;
  public:
  void clear_characters();
  ::service::ActionConfig_Character* mutable_characters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service::ActionConfig_Character >*
      mutable_characters();
  private:
  const ::service::ActionConfig_Character& _internal_characters(int index) const;
  ::service::ActionConfig_Character* _internal_add_characters();
  public:
  const ::service::ActionConfig_Character& characters(int index) const;
  ::service::ActionConfig_Character* add_characters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service::ActionConfig_Character >&
      characters() const;

  // repeated .service.ActionConfig.Object objects = 3;
  int objects_size() const;
  private:
  int _internal_objects_size() const;
  public:
  void clear_objects();
  ::service::ActionConfig_Object* mutable_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service::ActionConfig_Object >*
      mutable_objects();
  private:
  const ::service::ActionConfig_Object& _internal_objects(int index) const;
  ::service::ActionConfig_Object* _internal_add_objects();
  public:
  const ::service::ActionConfig_Object& objects(int index) const;
  ::service::ActionConfig_Object* add_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service::ActionConfig_Object >&
      objects() const;

  // string classification = 4;
  void clear_classification();
  const std::string& classification() const;
  void set_classification(const std::string& value);
  void set_classification(std::string&& value);
  void set_classification(const char* value);
  void set_classification(const char* value, size_t size);
  std::string* mutable_classification();
  std::string* release_classification();
  void set_allocated_classification(std::string* classification);
  private:
  const std::string& _internal_classification() const;
  void _internal_set_classification(const std::string& value);
  std::string* _internal_mutable_classification();
  public:

  // int32 context_level = 5;
  void clear_context_level();
  ::PROTOBUF_NAMESPACE_ID::int32 context_level() const;
  void set_context_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_context_level() const;
  void _internal_set_context_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:service.ActionConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> actions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service::ActionConfig_Character > characters_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service::ActionConfig_Object > objects_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr classification_;
  ::PROTOBUF_NAMESPACE_ID::int32 context_level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class STTRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service.STTRequest) */ {
 public:
  inline STTRequest() : STTRequest(nullptr) {}
  virtual ~STTRequest();

  STTRequest(const STTRequest& from);
  STTRequest(STTRequest&& from) noexcept
    : STTRequest() {
    *this = ::std::move(from);
  }

  inline STTRequest& operator=(const STTRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline STTRequest& operator=(STTRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const STTRequest& default_instance();

  enum RequestTypeCase {
    kAudioConfig = 1,
    kAudioChunk = 2,
    REQUEST_TYPE_NOT_SET = 0,
  };

  static inline const STTRequest* internal_default_instance() {
    return reinterpret_cast<const STTRequest*>(
               &_STTRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(STTRequest& a, STTRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(STTRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(STTRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline STTRequest* New() const final {
    return CreateMaybeMessage<STTRequest>(nullptr);
  }

  STTRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<STTRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const STTRequest& from);
  void MergeFrom(const STTRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(STTRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service.STTRequest";
  }
  protected:
  explicit STTRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_service_2eproto);
    return ::descriptor_table_service_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudioConfigFieldNumber = 1,
    kAudioChunkFieldNumber = 2,
  };
  // .service.AudioConfig audio_config = 1;
  bool has_audio_config() const;
  private:
  bool _internal_has_audio_config() const;
  public:
  void clear_audio_config();
  const ::service::AudioConfig& audio_config() const;
  ::service::AudioConfig* release_audio_config();
  ::service::AudioConfig* mutable_audio_config();
  void set_allocated_audio_config(::service::AudioConfig* audio_config);
  private:
  const ::service::AudioConfig& _internal_audio_config() const;
  ::service::AudioConfig* _internal_mutable_audio_config();
  public:
  void unsafe_arena_set_allocated_audio_config(
      ::service::AudioConfig* audio_config);
  ::service::AudioConfig* unsafe_arena_release_audio_config();

  // bytes audio_chunk = 2;
  private:
  bool _internal_has_audio_chunk() const;
  public:
  void clear_audio_chunk();
  const std::string& audio_chunk() const;
  void set_audio_chunk(const std::string& value);
  void set_audio_chunk(std::string&& value);
  void set_audio_chunk(const char* value);
  void set_audio_chunk(const void* value, size_t size);
  std::string* mutable_audio_chunk();
  std::string* release_audio_chunk();
  void set_allocated_audio_chunk(std::string* audio_chunk);
  private:
  const std::string& _internal_audio_chunk() const;
  void _internal_set_audio_chunk(const std::string& value);
  std::string* _internal_mutable_audio_chunk();
  public:

  void clear_request_type();
  RequestTypeCase request_type_case() const;
  // @@protoc_insertion_point(class_scope:service.STTRequest)
 private:
  class _Internal;
  void set_has_audio_config();
  void set_has_audio_chunk();

  inline bool has_request_type() const;
  inline void clear_has_request_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union RequestTypeUnion {
    RequestTypeUnion() {}
    ::service::AudioConfig* audio_config_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audio_chunk_;
  } request_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class STTResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service.STTResponse) */ {
 public:
  inline STTResponse() : STTResponse(nullptr) {}
  virtual ~STTResponse();

  STTResponse(const STTResponse& from);
  STTResponse(STTResponse&& from) noexcept
    : STTResponse() {
    *this = ::std::move(from);
  }

  inline STTResponse& operator=(const STTResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline STTResponse& operator=(STTResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const STTResponse& default_instance();

  static inline const STTResponse* internal_default_instance() {
    return reinterpret_cast<const STTResponse*>(
               &_STTResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(STTResponse& a, STTResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(STTResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(STTResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline STTResponse* New() const final {
    return CreateMaybeMessage<STTResponse>(nullptr);
  }

  STTResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<STTResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const STTResponse& from);
  void MergeFrom(const STTResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(STTResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service.STTResponse";
  }
  protected:
  explicit STTResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_service_2eproto);
    return ::descriptor_table_service_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
  };
  // string text = 1;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // @@protoc_insertion_point(class_scope:service.STTResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class GetResponseRequest_GetResponseConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service.GetResponseRequest.GetResponseConfig) */ {
 public:
  inline GetResponseRequest_GetResponseConfig() : GetResponseRequest_GetResponseConfig(nullptr) {}
  virtual ~GetResponseRequest_GetResponseConfig();

  GetResponseRequest_GetResponseConfig(const GetResponseRequest_GetResponseConfig& from);
  GetResponseRequest_GetResponseConfig(GetResponseRequest_GetResponseConfig&& from) noexcept
    : GetResponseRequest_GetResponseConfig() {
    *this = ::std::move(from);
  }

  inline GetResponseRequest_GetResponseConfig& operator=(const GetResponseRequest_GetResponseConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetResponseRequest_GetResponseConfig& operator=(GetResponseRequest_GetResponseConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetResponseRequest_GetResponseConfig& default_instance();

  static inline const GetResponseRequest_GetResponseConfig* internal_default_instance() {
    return reinterpret_cast<const GetResponseRequest_GetResponseConfig*>(
               &_GetResponseRequest_GetResponseConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetResponseRequest_GetResponseConfig& a, GetResponseRequest_GetResponseConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(GetResponseRequest_GetResponseConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetResponseRequest_GetResponseConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetResponseRequest_GetResponseConfig* New() const final {
    return CreateMaybeMessage<GetResponseRequest_GetResponseConfig>(nullptr);
  }

  GetResponseRequest_GetResponseConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetResponseRequest_GetResponseConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetResponseRequest_GetResponseConfig& from);
  void MergeFrom(const GetResponseRequest_GetResponseConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetResponseRequest_GetResponseConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service.GetResponseRequest.GetResponseConfig";
  }
  protected:
  explicit GetResponseRequest_GetResponseConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_service_2eproto);
    return ::descriptor_table_service_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterIdFieldNumber = 2,
    kApiKeyFieldNumber = 3,
    kSessionIdFieldNumber = 4,
    kSpeakerFieldNumber = 7,
    kAudioConfigFieldNumber = 5,
    kActionConfigFieldNumber = 6,
  };
  // string character_id = 2;
  void clear_character_id();
  const std::string& character_id() const;
  void set_character_id(const std::string& value);
  void set_character_id(std::string&& value);
  void set_character_id(const char* value);
  void set_character_id(const char* value, size_t size);
  std::string* mutable_character_id();
  std::string* release_character_id();
  void set_allocated_character_id(std::string* character_id);
  private:
  const std::string& _internal_character_id() const;
  void _internal_set_character_id(const std::string& value);
  std::string* _internal_mutable_character_id();
  public:

  // string api_key = 3;
  void clear_api_key();
  const std::string& api_key() const;
  void set_api_key(const std::string& value);
  void set_api_key(std::string&& value);
  void set_api_key(const char* value);
  void set_api_key(const char* value, size_t size);
  std::string* mutable_api_key();
  std::string* release_api_key();
  void set_allocated_api_key(std::string* api_key);
  private:
  const std::string& _internal_api_key() const;
  void _internal_set_api_key(const std::string& value);
  std::string* _internal_mutable_api_key();
  public:

  // string session_id = 4;
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // string speaker = 7;
  void clear_speaker();
  const std::string& speaker() const;
  void set_speaker(const std::string& value);
  void set_speaker(std::string&& value);
  void set_speaker(const char* value);
  void set_speaker(const char* value, size_t size);
  std::string* mutable_speaker();
  std::string* release_speaker();
  void set_allocated_speaker(std::string* speaker);
  private:
  const std::string& _internal_speaker() const;
  void _internal_set_speaker(const std::string& value);
  std::string* _internal_mutable_speaker();
  public:

  // .service.AudioConfig audio_config = 5;
  bool has_audio_config() const;
  private:
  bool _internal_has_audio_config() const;
  public:
  void clear_audio_config();
  const ::service::AudioConfig& audio_config() const;
  ::service::AudioConfig* release_audio_config();
  ::service::AudioConfig* mutable_audio_config();
  void set_allocated_audio_config(::service::AudioConfig* audio_config);
  private:
  const ::service::AudioConfig& _internal_audio_config() const;
  ::service::AudioConfig* _internal_mutable_audio_config();
  public:
  void unsafe_arena_set_allocated_audio_config(
      ::service::AudioConfig* audio_config);
  ::service::AudioConfig* unsafe_arena_release_audio_config();

  // .service.ActionConfig action_config = 6;
  bool has_action_config() const;
  private:
  bool _internal_has_action_config() const;
  public:
  void clear_action_config();
  const ::service::ActionConfig& action_config() const;
  ::service::ActionConfig* release_action_config();
  ::service::ActionConfig* mutable_action_config();
  void set_allocated_action_config(::service::ActionConfig* action_config);
  private:
  const ::service::ActionConfig& _internal_action_config() const;
  ::service::ActionConfig* _internal_mutable_action_config();
  public:
  void unsafe_arena_set_allocated_action_config(
      ::service::ActionConfig* action_config);
  ::service::ActionConfig* unsafe_arena_release_action_config();

  // @@protoc_insertion_point(class_scope:service.GetResponseRequest.GetResponseConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr character_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr api_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr speaker_;
  ::service::AudioConfig* audio_config_;
  ::service::ActionConfig* action_config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class GetResponseRequest_GetResponseData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service.GetResponseRequest.GetResponseData) */ {
 public:
  inline GetResponseRequest_GetResponseData() : GetResponseRequest_GetResponseData(nullptr) {}
  virtual ~GetResponseRequest_GetResponseData();

  GetResponseRequest_GetResponseData(const GetResponseRequest_GetResponseData& from);
  GetResponseRequest_GetResponseData(GetResponseRequest_GetResponseData&& from) noexcept
    : GetResponseRequest_GetResponseData() {
    *this = ::std::move(from);
  }

  inline GetResponseRequest_GetResponseData& operator=(const GetResponseRequest_GetResponseData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetResponseRequest_GetResponseData& operator=(GetResponseRequest_GetResponseData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetResponseRequest_GetResponseData& default_instance();

  enum InputTypeCase {
    kAudioData = 1,
    kTextData = 2,
    INPUT_TYPE_NOT_SET = 0,
  };

  static inline const GetResponseRequest_GetResponseData* internal_default_instance() {
    return reinterpret_cast<const GetResponseRequest_GetResponseData*>(
               &_GetResponseRequest_GetResponseData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetResponseRequest_GetResponseData& a, GetResponseRequest_GetResponseData& b) {
    a.Swap(&b);
  }
  inline void Swap(GetResponseRequest_GetResponseData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetResponseRequest_GetResponseData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetResponseRequest_GetResponseData* New() const final {
    return CreateMaybeMessage<GetResponseRequest_GetResponseData>(nullptr);
  }

  GetResponseRequest_GetResponseData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetResponseRequest_GetResponseData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetResponseRequest_GetResponseData& from);
  void MergeFrom(const GetResponseRequest_GetResponseData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetResponseRequest_GetResponseData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service.GetResponseRequest.GetResponseData";
  }
  protected:
  explicit GetResponseRequest_GetResponseData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_service_2eproto);
    return ::descriptor_table_service_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudioDataFieldNumber = 1,
    kTextDataFieldNumber = 2,
  };
  // bytes audio_data = 1;
  private:
  bool _internal_has_audio_data() const;
  public:
  void clear_audio_data();
  const std::string& audio_data() const;
  void set_audio_data(const std::string& value);
  void set_audio_data(std::string&& value);
  void set_audio_data(const char* value);
  void set_audio_data(const void* value, size_t size);
  std::string* mutable_audio_data();
  std::string* release_audio_data();
  void set_allocated_audio_data(std::string* audio_data);
  private:
  const std::string& _internal_audio_data() const;
  void _internal_set_audio_data(const std::string& value);
  std::string* _internal_mutable_audio_data();
  public:

  // string text_data = 2;
  private:
  bool _internal_has_text_data() const;
  public:
  void clear_text_data();
  const std::string& text_data() const;
  void set_text_data(const std::string& value);
  void set_text_data(std::string&& value);
  void set_text_data(const char* value);
  void set_text_data(const char* value, size_t size);
  std::string* mutable_text_data();
  std::string* release_text_data();
  void set_allocated_text_data(std::string* text_data);
  private:
  const std::string& _internal_text_data() const;
  void _internal_set_text_data(const std::string& value);
  std::string* _internal_mutable_text_data();
  public:

  void clear_input_type();
  InputTypeCase input_type_case() const;
  // @@protoc_insertion_point(class_scope:service.GetResponseRequest.GetResponseData)
 private:
  class _Internal;
  void set_has_audio_data();
  void set_has_text_data();

  inline bool has_input_type() const;
  inline void clear_has_input_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union InputTypeUnion {
    InputTypeUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audio_data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_data_;
  } input_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class GetResponseRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service.GetResponseRequest) */ {
 public:
  inline GetResponseRequest() : GetResponseRequest(nullptr) {}
  virtual ~GetResponseRequest();

  GetResponseRequest(const GetResponseRequest& from);
  GetResponseRequest(GetResponseRequest&& from) noexcept
    : GetResponseRequest() {
    *this = ::std::move(from);
  }

  inline GetResponseRequest& operator=(const GetResponseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetResponseRequest& operator=(GetResponseRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetResponseRequest& default_instance();

  enum RequestTypeCase {
    kGetResponseConfig = 1,
    kGetResponseData = 2,
    REQUEST_TYPE_NOT_SET = 0,
  };

  static inline const GetResponseRequest* internal_default_instance() {
    return reinterpret_cast<const GetResponseRequest*>(
               &_GetResponseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetResponseRequest& a, GetResponseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetResponseRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetResponseRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetResponseRequest* New() const final {
    return CreateMaybeMessage<GetResponseRequest>(nullptr);
  }

  GetResponseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetResponseRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetResponseRequest& from);
  void MergeFrom(const GetResponseRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetResponseRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service.GetResponseRequest";
  }
  protected:
  explicit GetResponseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_service_2eproto);
    return ::descriptor_table_service_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetResponseRequest_GetResponseConfig GetResponseConfig;
  typedef GetResponseRequest_GetResponseData GetResponseData;

  // accessors -------------------------------------------------------

  enum : int {
    kGetResponseConfigFieldNumber = 1,
    kGetResponseDataFieldNumber = 2,
  };
  // .service.GetResponseRequest.GetResponseConfig get_response_config = 1;
  bool has_get_response_config() const;
  private:
  bool _internal_has_get_response_config() const;
  public:
  void clear_get_response_config();
  const ::service::GetResponseRequest_GetResponseConfig& get_response_config() const;
  ::service::GetResponseRequest_GetResponseConfig* release_get_response_config();
  ::service::GetResponseRequest_GetResponseConfig* mutable_get_response_config();
  void set_allocated_get_response_config(::service::GetResponseRequest_GetResponseConfig* get_response_config);
  private:
  const ::service::GetResponseRequest_GetResponseConfig& _internal_get_response_config() const;
  ::service::GetResponseRequest_GetResponseConfig* _internal_mutable_get_response_config();
  public:
  void unsafe_arena_set_allocated_get_response_config(
      ::service::GetResponseRequest_GetResponseConfig* get_response_config);
  ::service::GetResponseRequest_GetResponseConfig* unsafe_arena_release_get_response_config();

  // .service.GetResponseRequest.GetResponseData get_response_data = 2;
  bool has_get_response_data() const;
  private:
  bool _internal_has_get_response_data() const;
  public:
  void clear_get_response_data();
  const ::service::GetResponseRequest_GetResponseData& get_response_data() const;
  ::service::GetResponseRequest_GetResponseData* release_get_response_data();
  ::service::GetResponseRequest_GetResponseData* mutable_get_response_data();
  void set_allocated_get_response_data(::service::GetResponseRequest_GetResponseData* get_response_data);
  private:
  const ::service::GetResponseRequest_GetResponseData& _internal_get_response_data() const;
  ::service::GetResponseRequest_GetResponseData* _internal_mutable_get_response_data();
  public:
  void unsafe_arena_set_allocated_get_response_data(
      ::service::GetResponseRequest_GetResponseData* get_response_data);
  ::service::GetResponseRequest_GetResponseData* unsafe_arena_release_get_response_data();

  void clear_request_type();
  RequestTypeCase request_type_case() const;
  // @@protoc_insertion_point(class_scope:service.GetResponseRequest)
 private:
  class _Internal;
  void set_has_get_response_config();
  void set_has_get_response_data();

  inline bool has_request_type() const;
  inline void clear_has_request_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union RequestTypeUnion {
    RequestTypeUnion() {}
    ::service::GetResponseRequest_GetResponseConfig* get_response_config_;
    ::service::GetResponseRequest_GetResponseData* get_response_data_;
  } request_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class GetResponseResponse_AudioResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service.GetResponseResponse.AudioResponse) */ {
 public:
  inline GetResponseResponse_AudioResponse() : GetResponseResponse_AudioResponse(nullptr) {}
  virtual ~GetResponseResponse_AudioResponse();

  GetResponseResponse_AudioResponse(const GetResponseResponse_AudioResponse& from);
  GetResponseResponse_AudioResponse(GetResponseResponse_AudioResponse&& from) noexcept
    : GetResponseResponse_AudioResponse() {
    *this = ::std::move(from);
  }

  inline GetResponseResponse_AudioResponse& operator=(const GetResponseResponse_AudioResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetResponseResponse_AudioResponse& operator=(GetResponseResponse_AudioResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetResponseResponse_AudioResponse& default_instance();

  static inline const GetResponseResponse_AudioResponse* internal_default_instance() {
    return reinterpret_cast<const GetResponseResponse_AudioResponse*>(
               &_GetResponseResponse_AudioResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetResponseResponse_AudioResponse& a, GetResponseResponse_AudioResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetResponseResponse_AudioResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetResponseResponse_AudioResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetResponseResponse_AudioResponse* New() const final {
    return CreateMaybeMessage<GetResponseResponse_AudioResponse>(nullptr);
  }

  GetResponseResponse_AudioResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetResponseResponse_AudioResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetResponseResponse_AudioResponse& from);
  void MergeFrom(const GetResponseResponse_AudioResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetResponseResponse_AudioResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service.GetResponseResponse.AudioResponse";
  }
  protected:
  explicit GetResponseResponse_AudioResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_service_2eproto);
    return ::descriptor_table_service_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudioDataFieldNumber = 1,
    kTextDataFieldNumber = 3,
    kAudioConfigFieldNumber = 2,
    kEndOfResponseFieldNumber = 4,
  };
  // bytes audio_data = 1;
  void clear_audio_data();
  const std::string& audio_data() const;
  void set_audio_data(const std::string& value);
  void set_audio_data(std::string&& value);
  void set_audio_data(const char* value);
  void set_audio_data(const void* value, size_t size);
  std::string* mutable_audio_data();
  std::string* release_audio_data();
  void set_allocated_audio_data(std::string* audio_data);
  private:
  const std::string& _internal_audio_data() const;
  void _internal_set_audio_data(const std::string& value);
  std::string* _internal_mutable_audio_data();
  public:

  // string text_data = 3;
  void clear_text_data();
  const std::string& text_data() const;
  void set_text_data(const std::string& value);
  void set_text_data(std::string&& value);
  void set_text_data(const char* value);
  void set_text_data(const char* value, size_t size);
  std::string* mutable_text_data();
  std::string* release_text_data();
  void set_allocated_text_data(std::string* text_data);
  private:
  const std::string& _internal_text_data() const;
  void _internal_set_text_data(const std::string& value);
  std::string* _internal_mutable_text_data();
  public:

  // .service.AudioConfig audio_config = 2;
  bool has_audio_config() const;
  private:
  bool _internal_has_audio_config() const;
  public:
  void clear_audio_config();
  const ::service::AudioConfig& audio_config() const;
  ::service::AudioConfig* release_audio_config();
  ::service::AudioConfig* mutable_audio_config();
  void set_allocated_audio_config(::service::AudioConfig* audio_config);
  private:
  const ::service::AudioConfig& _internal_audio_config() const;
  ::service::AudioConfig* _internal_mutable_audio_config();
  public:
  void unsafe_arena_set_allocated_audio_config(
      ::service::AudioConfig* audio_config);
  ::service::AudioConfig* unsafe_arena_release_audio_config();

  // bool end_of_response = 4;
  void clear_end_of_response();
  bool end_of_response() const;
  void set_end_of_response(bool value);
  private:
  bool _internal_end_of_response() const;
  void _internal_set_end_of_response(bool value);
  public:

  // @@protoc_insertion_point(class_scope:service.GetResponseResponse.AudioResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audio_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_data_;
  ::service::AudioConfig* audio_config_;
  bool end_of_response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class GetResponseResponse_ActionResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service.GetResponseResponse.ActionResponse) */ {
 public:
  inline GetResponseResponse_ActionResponse() : GetResponseResponse_ActionResponse(nullptr) {}
  virtual ~GetResponseResponse_ActionResponse();

  GetResponseResponse_ActionResponse(const GetResponseResponse_ActionResponse& from);
  GetResponseResponse_ActionResponse(GetResponseResponse_ActionResponse&& from) noexcept
    : GetResponseResponse_ActionResponse() {
    *this = ::std::move(from);
  }

  inline GetResponseResponse_ActionResponse& operator=(const GetResponseResponse_ActionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetResponseResponse_ActionResponse& operator=(GetResponseResponse_ActionResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetResponseResponse_ActionResponse& default_instance();

  static inline const GetResponseResponse_ActionResponse* internal_default_instance() {
    return reinterpret_cast<const GetResponseResponse_ActionResponse*>(
               &_GetResponseResponse_ActionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetResponseResponse_ActionResponse& a, GetResponseResponse_ActionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetResponseResponse_ActionResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetResponseResponse_ActionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetResponseResponse_ActionResponse* New() const final {
    return CreateMaybeMessage<GetResponseResponse_ActionResponse>(nullptr);
  }

  GetResponseResponse_ActionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetResponseResponse_ActionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetResponseResponse_ActionResponse& from);
  void MergeFrom(const GetResponseResponse_ActionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetResponseResponse_ActionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service.GetResponseResponse.ActionResponse";
  }
  protected:
  explicit GetResponseResponse_ActionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_service_2eproto);
    return ::descriptor_table_service_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  void set_action(const std::string& value);
  void set_action(std::string&& value);
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  std::string* mutable_action();
  std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // @@protoc_insertion_point(class_scope:service.GetResponseResponse.ActionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class GetResponseResponse_UserTranscript PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service.GetResponseResponse.UserTranscript) */ {
 public:
  inline GetResponseResponse_UserTranscript() : GetResponseResponse_UserTranscript(nullptr) {}
  virtual ~GetResponseResponse_UserTranscript();

  GetResponseResponse_UserTranscript(const GetResponseResponse_UserTranscript& from);
  GetResponseResponse_UserTranscript(GetResponseResponse_UserTranscript&& from) noexcept
    : GetResponseResponse_UserTranscript() {
    *this = ::std::move(from);
  }

  inline GetResponseResponse_UserTranscript& operator=(const GetResponseResponse_UserTranscript& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetResponseResponse_UserTranscript& operator=(GetResponseResponse_UserTranscript&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetResponseResponse_UserTranscript& default_instance();

  static inline const GetResponseResponse_UserTranscript* internal_default_instance() {
    return reinterpret_cast<const GetResponseResponse_UserTranscript*>(
               &_GetResponseResponse_UserTranscript_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetResponseResponse_UserTranscript& a, GetResponseResponse_UserTranscript& b) {
    a.Swap(&b);
  }
  inline void Swap(GetResponseResponse_UserTranscript* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetResponseResponse_UserTranscript* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetResponseResponse_UserTranscript* New() const final {
    return CreateMaybeMessage<GetResponseResponse_UserTranscript>(nullptr);
  }

  GetResponseResponse_UserTranscript* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetResponseResponse_UserTranscript>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetResponseResponse_UserTranscript& from);
  void MergeFrom(const GetResponseResponse_UserTranscript& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetResponseResponse_UserTranscript* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service.GetResponseResponse.UserTranscript";
  }
  protected:
  explicit GetResponseResponse_UserTranscript(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_service_2eproto);
    return ::descriptor_table_service_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextDataFieldNumber = 1,
    kIsFinalFieldNumber = 2,
    kEndOfResponseFieldNumber = 3,
  };
  // string text_data = 1;
  void clear_text_data();
  const std::string& text_data() const;
  void set_text_data(const std::string& value);
  void set_text_data(std::string&& value);
  void set_text_data(const char* value);
  void set_text_data(const char* value, size_t size);
  std::string* mutable_text_data();
  std::string* release_text_data();
  void set_allocated_text_data(std::string* text_data);
  private:
  const std::string& _internal_text_data() const;
  void _internal_set_text_data(const std::string& value);
  std::string* _internal_mutable_text_data();
  public:

  // bool is_final = 2;
  void clear_is_final();
  bool is_final() const;
  void set_is_final(bool value);
  private:
  bool _internal_is_final() const;
  void _internal_set_is_final(bool value);
  public:

  // bool end_of_response = 3;
  void clear_end_of_response();
  bool end_of_response() const;
  void set_end_of_response(bool value);
  private:
  bool _internal_end_of_response() const;
  void _internal_set_end_of_response(bool value);
  public:

  // @@protoc_insertion_point(class_scope:service.GetResponseResponse.UserTranscript)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_data_;
  bool is_final_;
  bool end_of_response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class GetResponseResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service.GetResponseResponse) */ {
 public:
  inline GetResponseResponse() : GetResponseResponse(nullptr) {}
  virtual ~GetResponseResponse();

  GetResponseResponse(const GetResponseResponse& from);
  GetResponseResponse(GetResponseResponse&& from) noexcept
    : GetResponseResponse() {
    *this = ::std::move(from);
  }

  inline GetResponseResponse& operator=(const GetResponseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetResponseResponse& operator=(GetResponseResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetResponseResponse& default_instance();

  enum ResponseTypeCase {
    kActionResponse = 2,
    kAudioResponse = 3,
    kDebugLog = 4,
    kUserQuery = 5,
    RESPONSE_TYPE_NOT_SET = 0,
  };

  static inline const GetResponseResponse* internal_default_instance() {
    return reinterpret_cast<const GetResponseResponse*>(
               &_GetResponseResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetResponseResponse& a, GetResponseResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetResponseResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetResponseResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetResponseResponse* New() const final {
    return CreateMaybeMessage<GetResponseResponse>(nullptr);
  }

  GetResponseResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetResponseResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetResponseResponse& from);
  void MergeFrom(const GetResponseResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetResponseResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service.GetResponseResponse";
  }
  protected:
  explicit GetResponseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_service_2eproto);
    return ::descriptor_table_service_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetResponseResponse_AudioResponse AudioResponse;
  typedef GetResponseResponse_ActionResponse ActionResponse;
  typedef GetResponseResponse_UserTranscript UserTranscript;

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
    kActionResponseFieldNumber = 2,
    kAudioResponseFieldNumber = 3,
    kDebugLogFieldNumber = 4,
    kUserQueryFieldNumber = 5,
  };
  // string session_id = 1;
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // .service.GetResponseResponse.ActionResponse action_response = 2;
  bool has_action_response() const;
  private:
  bool _internal_has_action_response() const;
  public:
  void clear_action_response();
  const ::service::GetResponseResponse_ActionResponse& action_response() const;
  ::service::GetResponseResponse_ActionResponse* release_action_response();
  ::service::GetResponseResponse_ActionResponse* mutable_action_response();
  void set_allocated_action_response(::service::GetResponseResponse_ActionResponse* action_response);
  private:
  const ::service::GetResponseResponse_ActionResponse& _internal_action_response() const;
  ::service::GetResponseResponse_ActionResponse* _internal_mutable_action_response();
  public:
  void unsafe_arena_set_allocated_action_response(
      ::service::GetResponseResponse_ActionResponse* action_response);
  ::service::GetResponseResponse_ActionResponse* unsafe_arena_release_action_response();

  // .service.GetResponseResponse.AudioResponse audio_response = 3;
  bool has_audio_response() const;
  private:
  bool _internal_has_audio_response() const;
  public:
  void clear_audio_response();
  const ::service::GetResponseResponse_AudioResponse& audio_response() const;
  ::service::GetResponseResponse_AudioResponse* release_audio_response();
  ::service::GetResponseResponse_AudioResponse* mutable_audio_response();
  void set_allocated_audio_response(::service::GetResponseResponse_AudioResponse* audio_response);
  private:
  const ::service::GetResponseResponse_AudioResponse& _internal_audio_response() const;
  ::service::GetResponseResponse_AudioResponse* _internal_mutable_audio_response();
  public:
  void unsafe_arena_set_allocated_audio_response(
      ::service::GetResponseResponse_AudioResponse* audio_response);
  ::service::GetResponseResponse_AudioResponse* unsafe_arena_release_audio_response();

  // string debug_log = 4;
  private:
  bool _internal_has_debug_log() const;
  public:
  void clear_debug_log();
  const std::string& debug_log() const;
  void set_debug_log(const std::string& value);
  void set_debug_log(std::string&& value);
  void set_debug_log(const char* value);
  void set_debug_log(const char* value, size_t size);
  std::string* mutable_debug_log();
  std::string* release_debug_log();
  void set_allocated_debug_log(std::string* debug_log);
  private:
  const std::string& _internal_debug_log() const;
  void _internal_set_debug_log(const std::string& value);
  std::string* _internal_mutable_debug_log();
  public:

  // .service.GetResponseResponse.UserTranscript user_query = 5;
  bool has_user_query() const;
  private:
  bool _internal_has_user_query() const;
  public:
  void clear_user_query();
  const ::service::GetResponseResponse_UserTranscript& user_query() const;
  ::service::GetResponseResponse_UserTranscript* release_user_query();
  ::service::GetResponseResponse_UserTranscript* mutable_user_query();
  void set_allocated_user_query(::service::GetResponseResponse_UserTranscript* user_query);
  private:
  const ::service::GetResponseResponse_UserTranscript& _internal_user_query() const;
  ::service::GetResponseResponse_UserTranscript* _internal_mutable_user_query();
  public:
  void unsafe_arena_set_allocated_user_query(
      ::service::GetResponseResponse_UserTranscript* user_query);
  ::service::GetResponseResponse_UserTranscript* unsafe_arena_release_user_query();

  void clear_response_type();
  ResponseTypeCase response_type_case() const;
  // @@protoc_insertion_point(class_scope:service.GetResponseResponse)
 private:
  class _Internal;
  void set_has_action_response();
  void set_has_audio_response();
  void set_has_debug_log();
  void set_has_user_query();

  inline bool has_response_type() const;
  inline void clear_has_response_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  union ResponseTypeUnion {
    ResponseTypeUnion() {}
    ::service::GetResponseResponse_ActionResponse* action_response_;
    ::service::GetResponseResponse_AudioResponse* audio_response_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr debug_log_;
    ::service::GetResponseResponse_UserTranscript* user_query_;
  } response_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class HelloRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service.HelloRequest) */ {
 public:
  inline HelloRequest() : HelloRequest(nullptr) {}
  virtual ~HelloRequest();

  HelloRequest(const HelloRequest& from);
  HelloRequest(HelloRequest&& from) noexcept
    : HelloRequest() {
    *this = ::std::move(from);
  }

  inline HelloRequest& operator=(const HelloRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HelloRequest& operator=(HelloRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HelloRequest& default_instance();

  static inline const HelloRequest* internal_default_instance() {
    return reinterpret_cast<const HelloRequest*>(
               &_HelloRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(HelloRequest& a, HelloRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HelloRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HelloRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HelloRequest* New() const final {
    return CreateMaybeMessage<HelloRequest>(nullptr);
  }

  HelloRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HelloRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HelloRequest& from);
  void MergeFrom(const HelloRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HelloRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service.HelloRequest";
  }
  protected:
  explicit HelloRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_service_2eproto);
    return ::descriptor_table_service_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:service.HelloRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class HelloResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service.HelloResponse) */ {
 public:
  inline HelloResponse() : HelloResponse(nullptr) {}
  virtual ~HelloResponse();

  HelloResponse(const HelloResponse& from);
  HelloResponse(HelloResponse&& from) noexcept
    : HelloResponse() {
    *this = ::std::move(from);
  }

  inline HelloResponse& operator=(const HelloResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HelloResponse& operator=(HelloResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HelloResponse& default_instance();

  static inline const HelloResponse* internal_default_instance() {
    return reinterpret_cast<const HelloResponse*>(
               &_HelloResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(HelloResponse& a, HelloResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HelloResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HelloResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HelloResponse* New() const final {
    return CreateMaybeMessage<HelloResponse>(nullptr);
  }

  HelloResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HelloResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HelloResponse& from);
  void MergeFrom(const HelloResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HelloResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service.HelloResponse";
  }
  protected:
  explicit HelloResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_service_2eproto);
    return ::descriptor_table_service_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:service.HelloResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AudioConfig

// int32 sample_rate_hertz = 1;
inline void AudioConfig::clear_sample_rate_hertz() {
  sample_rate_hertz_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioConfig::_internal_sample_rate_hertz() const {
  return sample_rate_hertz_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioConfig::sample_rate_hertz() const {
  // @@protoc_insertion_point(field_get:service.AudioConfig.sample_rate_hertz)
  return _internal_sample_rate_hertz();
}
inline void AudioConfig::_internal_set_sample_rate_hertz(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sample_rate_hertz_ = value;
}
inline void AudioConfig::set_sample_rate_hertz(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sample_rate_hertz(value);
  // @@protoc_insertion_point(field_set:service.AudioConfig.sample_rate_hertz)
}

// -------------------------------------------------------------------

// ActionConfig_Character

// string name = 1;
inline void ActionConfig_Character::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ActionConfig_Character::name() const {
  // @@protoc_insertion_point(field_get:service.ActionConfig.Character.name)
  return _internal_name();
}
inline void ActionConfig_Character::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:service.ActionConfig.Character.name)
}
inline std::string* ActionConfig_Character::mutable_name() {
  // @@protoc_insertion_point(field_mutable:service.ActionConfig.Character.name)
  return _internal_mutable_name();
}
inline const std::string& ActionConfig_Character::_internal_name() const {
  return name_.Get();
}
inline void ActionConfig_Character::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ActionConfig_Character::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service.ActionConfig.Character.name)
}
inline void ActionConfig_Character::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:service.ActionConfig.Character.name)
}
inline void ActionConfig_Character::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service.ActionConfig.Character.name)
}
inline std::string* ActionConfig_Character::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ActionConfig_Character::release_name() {
  // @@protoc_insertion_point(field_release:service.ActionConfig.Character.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ActionConfig_Character::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service.ActionConfig.Character.name)
}

// string bio = 2;
inline void ActionConfig_Character::clear_bio() {
  bio_.ClearToEmpty();
}
inline const std::string& ActionConfig_Character::bio() const {
  // @@protoc_insertion_point(field_get:service.ActionConfig.Character.bio)
  return _internal_bio();
}
inline void ActionConfig_Character::set_bio(const std::string& value) {
  _internal_set_bio(value);
  // @@protoc_insertion_point(field_set:service.ActionConfig.Character.bio)
}
inline std::string* ActionConfig_Character::mutable_bio() {
  // @@protoc_insertion_point(field_mutable:service.ActionConfig.Character.bio)
  return _internal_mutable_bio();
}
inline const std::string& ActionConfig_Character::_internal_bio() const {
  return bio_.Get();
}
inline void ActionConfig_Character::_internal_set_bio(const std::string& value) {
  
  bio_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ActionConfig_Character::set_bio(std::string&& value) {
  
  bio_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service.ActionConfig.Character.bio)
}
inline void ActionConfig_Character::set_bio(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bio_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:service.ActionConfig.Character.bio)
}
inline void ActionConfig_Character::set_bio(const char* value,
    size_t size) {
  
  bio_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service.ActionConfig.Character.bio)
}
inline std::string* ActionConfig_Character::_internal_mutable_bio() {
  
  return bio_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ActionConfig_Character::release_bio() {
  // @@protoc_insertion_point(field_release:service.ActionConfig.Character.bio)
  return bio_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ActionConfig_Character::set_allocated_bio(std::string* bio) {
  if (bio != nullptr) {
    
  } else {
    
  }
  bio_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bio,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service.ActionConfig.Character.bio)
}

// -------------------------------------------------------------------

// ActionConfig_Object

// string name = 1;
inline void ActionConfig_Object::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ActionConfig_Object::name() const {
  // @@protoc_insertion_point(field_get:service.ActionConfig.Object.name)
  return _internal_name();
}
inline void ActionConfig_Object::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:service.ActionConfig.Object.name)
}
inline std::string* ActionConfig_Object::mutable_name() {
  // @@protoc_insertion_point(field_mutable:service.ActionConfig.Object.name)
  return _internal_mutable_name();
}
inline const std::string& ActionConfig_Object::_internal_name() const {
  return name_.Get();
}
inline void ActionConfig_Object::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ActionConfig_Object::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service.ActionConfig.Object.name)
}
inline void ActionConfig_Object::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:service.ActionConfig.Object.name)
}
inline void ActionConfig_Object::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service.ActionConfig.Object.name)
}
inline std::string* ActionConfig_Object::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ActionConfig_Object::release_name() {
  // @@protoc_insertion_point(field_release:service.ActionConfig.Object.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ActionConfig_Object::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service.ActionConfig.Object.name)
}

// string description = 2;
inline void ActionConfig_Object::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& ActionConfig_Object::description() const {
  // @@protoc_insertion_point(field_get:service.ActionConfig.Object.description)
  return _internal_description();
}
inline void ActionConfig_Object::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:service.ActionConfig.Object.description)
}
inline std::string* ActionConfig_Object::mutable_description() {
  // @@protoc_insertion_point(field_mutable:service.ActionConfig.Object.description)
  return _internal_mutable_description();
}
inline const std::string& ActionConfig_Object::_internal_description() const {
  return description_.Get();
}
inline void ActionConfig_Object::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ActionConfig_Object::set_description(std::string&& value) {
  
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service.ActionConfig.Object.description)
}
inline void ActionConfig_Object::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:service.ActionConfig.Object.description)
}
inline void ActionConfig_Object::set_description(const char* value,
    size_t size) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service.ActionConfig.Object.description)
}
inline std::string* ActionConfig_Object::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ActionConfig_Object::release_description() {
  // @@protoc_insertion_point(field_release:service.ActionConfig.Object.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ActionConfig_Object::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service.ActionConfig.Object.description)
}

// -------------------------------------------------------------------

// ActionConfig

// repeated string actions = 1;
inline int ActionConfig::_internal_actions_size() const {
  return actions_.size();
}
inline int ActionConfig::actions_size() const {
  return _internal_actions_size();
}
inline void ActionConfig::clear_actions() {
  actions_.Clear();
}
inline std::string* ActionConfig::add_actions() {
  // @@protoc_insertion_point(field_add_mutable:service.ActionConfig.actions)
  return _internal_add_actions();
}
inline const std::string& ActionConfig::_internal_actions(int index) const {
  return actions_.Get(index);
}
inline const std::string& ActionConfig::actions(int index) const {
  // @@protoc_insertion_point(field_get:service.ActionConfig.actions)
  return _internal_actions(index);
}
inline std::string* ActionConfig::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:service.ActionConfig.actions)
  return actions_.Mutable(index);
}
inline void ActionConfig::set_actions(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:service.ActionConfig.actions)
  actions_.Mutable(index)->assign(value);
}
inline void ActionConfig::set_actions(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:service.ActionConfig.actions)
  actions_.Mutable(index)->assign(std::move(value));
}
inline void ActionConfig::set_actions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  actions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:service.ActionConfig.actions)
}
inline void ActionConfig::set_actions(int index, const char* value, size_t size) {
  actions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:service.ActionConfig.actions)
}
inline std::string* ActionConfig::_internal_add_actions() {
  return actions_.Add();
}
inline void ActionConfig::add_actions(const std::string& value) {
  actions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:service.ActionConfig.actions)
}
inline void ActionConfig::add_actions(std::string&& value) {
  actions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:service.ActionConfig.actions)
}
inline void ActionConfig::add_actions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  actions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:service.ActionConfig.actions)
}
inline void ActionConfig::add_actions(const char* value, size_t size) {
  actions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:service.ActionConfig.actions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ActionConfig::actions() const {
  // @@protoc_insertion_point(field_list:service.ActionConfig.actions)
  return actions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ActionConfig::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:service.ActionConfig.actions)
  return &actions_;
}

// repeated .service.ActionConfig.Character characters = 2;
inline int ActionConfig::_internal_characters_size() const {
  return characters_.size();
}
inline int ActionConfig::characters_size() const {
  return _internal_characters_size();
}
inline void ActionConfig::clear_characters() {
  characters_.Clear();
}
inline ::service::ActionConfig_Character* ActionConfig::mutable_characters(int index) {
  // @@protoc_insertion_point(field_mutable:service.ActionConfig.characters)
  return characters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service::ActionConfig_Character >*
ActionConfig::mutable_characters() {
  // @@protoc_insertion_point(field_mutable_list:service.ActionConfig.characters)
  return &characters_;
}
inline const ::service::ActionConfig_Character& ActionConfig::_internal_characters(int index) const {
  return characters_.Get(index);
}
inline const ::service::ActionConfig_Character& ActionConfig::characters(int index) const {
  // @@protoc_insertion_point(field_get:service.ActionConfig.characters)
  return _internal_characters(index);
}
inline ::service::ActionConfig_Character* ActionConfig::_internal_add_characters() {
  return characters_.Add();
}
inline ::service::ActionConfig_Character* ActionConfig::add_characters() {
  // @@protoc_insertion_point(field_add:service.ActionConfig.characters)
  return _internal_add_characters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service::ActionConfig_Character >&
ActionConfig::characters() const {
  // @@protoc_insertion_point(field_list:service.ActionConfig.characters)
  return characters_;
}

// repeated .service.ActionConfig.Object objects = 3;
inline int ActionConfig::_internal_objects_size() const {
  return objects_.size();
}
inline int ActionConfig::objects_size() const {
  return _internal_objects_size();
}
inline void ActionConfig::clear_objects() {
  objects_.Clear();
}
inline ::service::ActionConfig_Object* ActionConfig::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:service.ActionConfig.objects)
  return objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service::ActionConfig_Object >*
ActionConfig::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:service.ActionConfig.objects)
  return &objects_;
}
inline const ::service::ActionConfig_Object& ActionConfig::_internal_objects(int index) const {
  return objects_.Get(index);
}
inline const ::service::ActionConfig_Object& ActionConfig::objects(int index) const {
  // @@protoc_insertion_point(field_get:service.ActionConfig.objects)
  return _internal_objects(index);
}
inline ::service::ActionConfig_Object* ActionConfig::_internal_add_objects() {
  return objects_.Add();
}
inline ::service::ActionConfig_Object* ActionConfig::add_objects() {
  // @@protoc_insertion_point(field_add:service.ActionConfig.objects)
  return _internal_add_objects();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service::ActionConfig_Object >&
ActionConfig::objects() const {
  // @@protoc_insertion_point(field_list:service.ActionConfig.objects)
  return objects_;
}

// string classification = 4;
inline void ActionConfig::clear_classification() {
  classification_.ClearToEmpty();
}
inline const std::string& ActionConfig::classification() const {
  // @@protoc_insertion_point(field_get:service.ActionConfig.classification)
  return _internal_classification();
}
inline void ActionConfig::set_classification(const std::string& value) {
  _internal_set_classification(value);
  // @@protoc_insertion_point(field_set:service.ActionConfig.classification)
}
inline std::string* ActionConfig::mutable_classification() {
  // @@protoc_insertion_point(field_mutable:service.ActionConfig.classification)
  return _internal_mutable_classification();
}
inline const std::string& ActionConfig::_internal_classification() const {
  return classification_.Get();
}
inline void ActionConfig::_internal_set_classification(const std::string& value) {
  
  classification_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ActionConfig::set_classification(std::string&& value) {
  
  classification_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service.ActionConfig.classification)
}
inline void ActionConfig::set_classification(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  classification_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:service.ActionConfig.classification)
}
inline void ActionConfig::set_classification(const char* value,
    size_t size) {
  
  classification_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service.ActionConfig.classification)
}
inline std::string* ActionConfig::_internal_mutable_classification() {
  
  return classification_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ActionConfig::release_classification() {
  // @@protoc_insertion_point(field_release:service.ActionConfig.classification)
  return classification_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ActionConfig::set_allocated_classification(std::string* classification) {
  if (classification != nullptr) {
    
  } else {
    
  }
  classification_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), classification,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service.ActionConfig.classification)
}

// int32 context_level = 5;
inline void ActionConfig::clear_context_level() {
  context_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActionConfig::_internal_context_level() const {
  return context_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActionConfig::context_level() const {
  // @@protoc_insertion_point(field_get:service.ActionConfig.context_level)
  return _internal_context_level();
}
inline void ActionConfig::_internal_set_context_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  context_level_ = value;
}
inline void ActionConfig::set_context_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_context_level(value);
  // @@protoc_insertion_point(field_set:service.ActionConfig.context_level)
}

// -------------------------------------------------------------------

// STTRequest

// .service.AudioConfig audio_config = 1;
inline bool STTRequest::_internal_has_audio_config() const {
  return request_type_case() == kAudioConfig;
}
inline bool STTRequest::has_audio_config() const {
  return _internal_has_audio_config();
}
inline void STTRequest::set_has_audio_config() {
  _oneof_case_[0] = kAudioConfig;
}
inline void STTRequest::clear_audio_config() {
  if (_internal_has_audio_config()) {
    if (GetArena() == nullptr) {
      delete request_type_.audio_config_;
    }
    clear_has_request_type();
  }
}
inline ::service::AudioConfig* STTRequest::release_audio_config() {
  // @@protoc_insertion_point(field_release:service.STTRequest.audio_config)
  if (_internal_has_audio_config()) {
    clear_has_request_type();
      ::service::AudioConfig* temp = request_type_.audio_config_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.audio_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service::AudioConfig& STTRequest::_internal_audio_config() const {
  return _internal_has_audio_config()
      ? *request_type_.audio_config_
      : reinterpret_cast< ::service::AudioConfig&>(::service::_AudioConfig_default_instance_);
}
inline const ::service::AudioConfig& STTRequest::audio_config() const {
  // @@protoc_insertion_point(field_get:service.STTRequest.audio_config)
  return _internal_audio_config();
}
inline ::service::AudioConfig* STTRequest::unsafe_arena_release_audio_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service.STTRequest.audio_config)
  if (_internal_has_audio_config()) {
    clear_has_request_type();
    ::service::AudioConfig* temp = request_type_.audio_config_;
    request_type_.audio_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void STTRequest::unsafe_arena_set_allocated_audio_config(::service::AudioConfig* audio_config) {
  clear_request_type();
  if (audio_config) {
    set_has_audio_config();
    request_type_.audio_config_ = audio_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service.STTRequest.audio_config)
}
inline ::service::AudioConfig* STTRequest::_internal_mutable_audio_config() {
  if (!_internal_has_audio_config()) {
    clear_request_type();
    set_has_audio_config();
    request_type_.audio_config_ = CreateMaybeMessage< ::service::AudioConfig >(GetArena());
  }
  return request_type_.audio_config_;
}
inline ::service::AudioConfig* STTRequest::mutable_audio_config() {
  // @@protoc_insertion_point(field_mutable:service.STTRequest.audio_config)
  return _internal_mutable_audio_config();
}

// bytes audio_chunk = 2;
inline bool STTRequest::_internal_has_audio_chunk() const {
  return request_type_case() == kAudioChunk;
}
inline void STTRequest::set_has_audio_chunk() {
  _oneof_case_[0] = kAudioChunk;
}
inline void STTRequest::clear_audio_chunk() {
  if (_internal_has_audio_chunk()) {
    request_type_.audio_chunk_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_request_type();
  }
}
inline const std::string& STTRequest::audio_chunk() const {
  // @@protoc_insertion_point(field_get:service.STTRequest.audio_chunk)
  return _internal_audio_chunk();
}
inline void STTRequest::set_audio_chunk(const std::string& value) {
  _internal_set_audio_chunk(value);
  // @@protoc_insertion_point(field_set:service.STTRequest.audio_chunk)
}
inline std::string* STTRequest::mutable_audio_chunk() {
  // @@protoc_insertion_point(field_mutable:service.STTRequest.audio_chunk)
  return _internal_mutable_audio_chunk();
}
inline const std::string& STTRequest::_internal_audio_chunk() const {
  if (_internal_has_audio_chunk()) {
    return request_type_.audio_chunk_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void STTRequest::_internal_set_audio_chunk(const std::string& value) {
  if (!_internal_has_audio_chunk()) {
    clear_request_type();
    set_has_audio_chunk();
    request_type_.audio_chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  request_type_.audio_chunk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void STTRequest::set_audio_chunk(std::string&& value) {
  // @@protoc_insertion_point(field_set:service.STTRequest.audio_chunk)
  if (!_internal_has_audio_chunk()) {
    clear_request_type();
    set_has_audio_chunk();
    request_type_.audio_chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  request_type_.audio_chunk_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service.STTRequest.audio_chunk)
}
inline void STTRequest::set_audio_chunk(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_audio_chunk()) {
    clear_request_type();
    set_has_audio_chunk();
    request_type_.audio_chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  request_type_.audio_chunk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:service.STTRequest.audio_chunk)
}
inline void STTRequest::set_audio_chunk(const void* value,
                             size_t size) {
  if (!_internal_has_audio_chunk()) {
    clear_request_type();
    set_has_audio_chunk();
    request_type_.audio_chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  request_type_.audio_chunk_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:service.STTRequest.audio_chunk)
}
inline std::string* STTRequest::_internal_mutable_audio_chunk() {
  if (!_internal_has_audio_chunk()) {
    clear_request_type();
    set_has_audio_chunk();
    request_type_.audio_chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return request_type_.audio_chunk_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* STTRequest::release_audio_chunk() {
  // @@protoc_insertion_point(field_release:service.STTRequest.audio_chunk)
  if (_internal_has_audio_chunk()) {
    clear_has_request_type();
    return request_type_.audio_chunk_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void STTRequest::set_allocated_audio_chunk(std::string* audio_chunk) {
  if (has_request_type()) {
    clear_request_type();
  }
  if (audio_chunk != nullptr) {
    set_has_audio_chunk();
    request_type_.audio_chunk_.UnsafeSetDefault(audio_chunk);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(audio_chunk);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:service.STTRequest.audio_chunk)
}

inline bool STTRequest::has_request_type() const {
  return request_type_case() != REQUEST_TYPE_NOT_SET;
}
inline void STTRequest::clear_has_request_type() {
  _oneof_case_[0] = REQUEST_TYPE_NOT_SET;
}
inline STTRequest::RequestTypeCase STTRequest::request_type_case() const {
  return STTRequest::RequestTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// STTResponse

// string text = 1;
inline void STTResponse::clear_text() {
  text_.ClearToEmpty();
}
inline const std::string& STTResponse::text() const {
  // @@protoc_insertion_point(field_get:service.STTResponse.text)
  return _internal_text();
}
inline void STTResponse::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:service.STTResponse.text)
}
inline std::string* STTResponse::mutable_text() {
  // @@protoc_insertion_point(field_mutable:service.STTResponse.text)
  return _internal_mutable_text();
}
inline const std::string& STTResponse::_internal_text() const {
  return text_.Get();
}
inline void STTResponse::_internal_set_text(const std::string& value) {
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void STTResponse::set_text(std::string&& value) {
  
  text_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service.STTResponse.text)
}
inline void STTResponse::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:service.STTResponse.text)
}
inline void STTResponse::set_text(const char* value,
    size_t size) {
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service.STTResponse.text)
}
inline std::string* STTResponse::_internal_mutable_text() {
  
  return text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* STTResponse::release_text() {
  // @@protoc_insertion_point(field_release:service.STTResponse.text)
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void STTResponse::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service.STTResponse.text)
}

// -------------------------------------------------------------------

// GetResponseRequest_GetResponseConfig

// string character_id = 2;
inline void GetResponseRequest_GetResponseConfig::clear_character_id() {
  character_id_.ClearToEmpty();
}
inline const std::string& GetResponseRequest_GetResponseConfig::character_id() const {
  // @@protoc_insertion_point(field_get:service.GetResponseRequest.GetResponseConfig.character_id)
  return _internal_character_id();
}
inline void GetResponseRequest_GetResponseConfig::set_character_id(const std::string& value) {
  _internal_set_character_id(value);
  // @@protoc_insertion_point(field_set:service.GetResponseRequest.GetResponseConfig.character_id)
}
inline std::string* GetResponseRequest_GetResponseConfig::mutable_character_id() {
  // @@protoc_insertion_point(field_mutable:service.GetResponseRequest.GetResponseConfig.character_id)
  return _internal_mutable_character_id();
}
inline const std::string& GetResponseRequest_GetResponseConfig::_internal_character_id() const {
  return character_id_.Get();
}
inline void GetResponseRequest_GetResponseConfig::_internal_set_character_id(const std::string& value) {
  
  character_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetResponseRequest_GetResponseConfig::set_character_id(std::string&& value) {
  
  character_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service.GetResponseRequest.GetResponseConfig.character_id)
}
inline void GetResponseRequest_GetResponseConfig::set_character_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  character_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:service.GetResponseRequest.GetResponseConfig.character_id)
}
inline void GetResponseRequest_GetResponseConfig::set_character_id(const char* value,
    size_t size) {
  
  character_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service.GetResponseRequest.GetResponseConfig.character_id)
}
inline std::string* GetResponseRequest_GetResponseConfig::_internal_mutable_character_id() {
  
  return character_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetResponseRequest_GetResponseConfig::release_character_id() {
  // @@protoc_insertion_point(field_release:service.GetResponseRequest.GetResponseConfig.character_id)
  return character_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetResponseRequest_GetResponseConfig::set_allocated_character_id(std::string* character_id) {
  if (character_id != nullptr) {
    
  } else {
    
  }
  character_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), character_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service.GetResponseRequest.GetResponseConfig.character_id)
}

// string api_key = 3;
inline void GetResponseRequest_GetResponseConfig::clear_api_key() {
  api_key_.ClearToEmpty();
}
inline const std::string& GetResponseRequest_GetResponseConfig::api_key() const {
  // @@protoc_insertion_point(field_get:service.GetResponseRequest.GetResponseConfig.api_key)
  return _internal_api_key();
}
inline void GetResponseRequest_GetResponseConfig::set_api_key(const std::string& value) {
  _internal_set_api_key(value);
  // @@protoc_insertion_point(field_set:service.GetResponseRequest.GetResponseConfig.api_key)
}
inline std::string* GetResponseRequest_GetResponseConfig::mutable_api_key() {
  // @@protoc_insertion_point(field_mutable:service.GetResponseRequest.GetResponseConfig.api_key)
  return _internal_mutable_api_key();
}
inline const std::string& GetResponseRequest_GetResponseConfig::_internal_api_key() const {
  return api_key_.Get();
}
inline void GetResponseRequest_GetResponseConfig::_internal_set_api_key(const std::string& value) {
  
  api_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetResponseRequest_GetResponseConfig::set_api_key(std::string&& value) {
  
  api_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service.GetResponseRequest.GetResponseConfig.api_key)
}
inline void GetResponseRequest_GetResponseConfig::set_api_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  api_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:service.GetResponseRequest.GetResponseConfig.api_key)
}
inline void GetResponseRequest_GetResponseConfig::set_api_key(const char* value,
    size_t size) {
  
  api_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service.GetResponseRequest.GetResponseConfig.api_key)
}
inline std::string* GetResponseRequest_GetResponseConfig::_internal_mutable_api_key() {
  
  return api_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetResponseRequest_GetResponseConfig::release_api_key() {
  // @@protoc_insertion_point(field_release:service.GetResponseRequest.GetResponseConfig.api_key)
  return api_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetResponseRequest_GetResponseConfig::set_allocated_api_key(std::string* api_key) {
  if (api_key != nullptr) {
    
  } else {
    
  }
  api_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), api_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service.GetResponseRequest.GetResponseConfig.api_key)
}

// string session_id = 4;
inline void GetResponseRequest_GetResponseConfig::clear_session_id() {
  session_id_.ClearToEmpty();
}
inline const std::string& GetResponseRequest_GetResponseConfig::session_id() const {
  // @@protoc_insertion_point(field_get:service.GetResponseRequest.GetResponseConfig.session_id)
  return _internal_session_id();
}
inline void GetResponseRequest_GetResponseConfig::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:service.GetResponseRequest.GetResponseConfig.session_id)
}
inline std::string* GetResponseRequest_GetResponseConfig::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:service.GetResponseRequest.GetResponseConfig.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& GetResponseRequest_GetResponseConfig::_internal_session_id() const {
  return session_id_.Get();
}
inline void GetResponseRequest_GetResponseConfig::_internal_set_session_id(const std::string& value) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetResponseRequest_GetResponseConfig::set_session_id(std::string&& value) {
  
  session_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service.GetResponseRequest.GetResponseConfig.session_id)
}
inline void GetResponseRequest_GetResponseConfig::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:service.GetResponseRequest.GetResponseConfig.session_id)
}
inline void GetResponseRequest_GetResponseConfig::set_session_id(const char* value,
    size_t size) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service.GetResponseRequest.GetResponseConfig.session_id)
}
inline std::string* GetResponseRequest_GetResponseConfig::_internal_mutable_session_id() {
  
  return session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetResponseRequest_GetResponseConfig::release_session_id() {
  // @@protoc_insertion_point(field_release:service.GetResponseRequest.GetResponseConfig.session_id)
  return session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetResponseRequest_GetResponseConfig::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service.GetResponseRequest.GetResponseConfig.session_id)
}

// .service.AudioConfig audio_config = 5;
inline bool GetResponseRequest_GetResponseConfig::_internal_has_audio_config() const {
  return this != internal_default_instance() && audio_config_ != nullptr;
}
inline bool GetResponseRequest_GetResponseConfig::has_audio_config() const {
  return _internal_has_audio_config();
}
inline void GetResponseRequest_GetResponseConfig::clear_audio_config() {
  if (GetArena() == nullptr && audio_config_ != nullptr) {
    delete audio_config_;
  }
  audio_config_ = nullptr;
}
inline const ::service::AudioConfig& GetResponseRequest_GetResponseConfig::_internal_audio_config() const {
  const ::service::AudioConfig* p = audio_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::service::AudioConfig&>(
      ::service::_AudioConfig_default_instance_);
}
inline const ::service::AudioConfig& GetResponseRequest_GetResponseConfig::audio_config() const {
  // @@protoc_insertion_point(field_get:service.GetResponseRequest.GetResponseConfig.audio_config)
  return _internal_audio_config();
}
inline void GetResponseRequest_GetResponseConfig::unsafe_arena_set_allocated_audio_config(
    ::service::AudioConfig* audio_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(audio_config_);
  }
  audio_config_ = audio_config;
  if (audio_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service.GetResponseRequest.GetResponseConfig.audio_config)
}
inline ::service::AudioConfig* GetResponseRequest_GetResponseConfig::release_audio_config() {
  
  ::service::AudioConfig* temp = audio_config_;
  audio_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::service::AudioConfig* GetResponseRequest_GetResponseConfig::unsafe_arena_release_audio_config() {
  // @@protoc_insertion_point(field_release:service.GetResponseRequest.GetResponseConfig.audio_config)
  
  ::service::AudioConfig* temp = audio_config_;
  audio_config_ = nullptr;
  return temp;
}
inline ::service::AudioConfig* GetResponseRequest_GetResponseConfig::_internal_mutable_audio_config() {
  
  if (audio_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::service::AudioConfig>(GetArena());
    audio_config_ = p;
  }
  return audio_config_;
}
inline ::service::AudioConfig* GetResponseRequest_GetResponseConfig::mutable_audio_config() {
  // @@protoc_insertion_point(field_mutable:service.GetResponseRequest.GetResponseConfig.audio_config)
  return _internal_mutable_audio_config();
}
inline void GetResponseRequest_GetResponseConfig::set_allocated_audio_config(::service::AudioConfig* audio_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete audio_config_;
  }
  if (audio_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(audio_config);
    if (message_arena != submessage_arena) {
      audio_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio_config, submessage_arena);
    }
    
  } else {
    
  }
  audio_config_ = audio_config;
  // @@protoc_insertion_point(field_set_allocated:service.GetResponseRequest.GetResponseConfig.audio_config)
}

// .service.ActionConfig action_config = 6;
inline bool GetResponseRequest_GetResponseConfig::_internal_has_action_config() const {
  return this != internal_default_instance() && action_config_ != nullptr;
}
inline bool GetResponseRequest_GetResponseConfig::has_action_config() const {
  return _internal_has_action_config();
}
inline void GetResponseRequest_GetResponseConfig::clear_action_config() {
  if (GetArena() == nullptr && action_config_ != nullptr) {
    delete action_config_;
  }
  action_config_ = nullptr;
}
inline const ::service::ActionConfig& GetResponseRequest_GetResponseConfig::_internal_action_config() const {
  const ::service::ActionConfig* p = action_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::service::ActionConfig&>(
      ::service::_ActionConfig_default_instance_);
}
inline const ::service::ActionConfig& GetResponseRequest_GetResponseConfig::action_config() const {
  // @@protoc_insertion_point(field_get:service.GetResponseRequest.GetResponseConfig.action_config)
  return _internal_action_config();
}
inline void GetResponseRequest_GetResponseConfig::unsafe_arena_set_allocated_action_config(
    ::service::ActionConfig* action_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_config_);
  }
  action_config_ = action_config;
  if (action_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service.GetResponseRequest.GetResponseConfig.action_config)
}
inline ::service::ActionConfig* GetResponseRequest_GetResponseConfig::release_action_config() {
  
  ::service::ActionConfig* temp = action_config_;
  action_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::service::ActionConfig* GetResponseRequest_GetResponseConfig::unsafe_arena_release_action_config() {
  // @@protoc_insertion_point(field_release:service.GetResponseRequest.GetResponseConfig.action_config)
  
  ::service::ActionConfig* temp = action_config_;
  action_config_ = nullptr;
  return temp;
}
inline ::service::ActionConfig* GetResponseRequest_GetResponseConfig::_internal_mutable_action_config() {
  
  if (action_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::service::ActionConfig>(GetArena());
    action_config_ = p;
  }
  return action_config_;
}
inline ::service::ActionConfig* GetResponseRequest_GetResponseConfig::mutable_action_config() {
  // @@protoc_insertion_point(field_mutable:service.GetResponseRequest.GetResponseConfig.action_config)
  return _internal_mutable_action_config();
}
inline void GetResponseRequest_GetResponseConfig::set_allocated_action_config(::service::ActionConfig* action_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete action_config_;
  }
  if (action_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(action_config);
    if (message_arena != submessage_arena) {
      action_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_config, submessage_arena);
    }
    
  } else {
    
  }
  action_config_ = action_config;
  // @@protoc_insertion_point(field_set_allocated:service.GetResponseRequest.GetResponseConfig.action_config)
}

// string speaker = 7;
inline void GetResponseRequest_GetResponseConfig::clear_speaker() {
  speaker_.ClearToEmpty();
}
inline const std::string& GetResponseRequest_GetResponseConfig::speaker() const {
  // @@protoc_insertion_point(field_get:service.GetResponseRequest.GetResponseConfig.speaker)
  return _internal_speaker();
}
inline void GetResponseRequest_GetResponseConfig::set_speaker(const std::string& value) {
  _internal_set_speaker(value);
  // @@protoc_insertion_point(field_set:service.GetResponseRequest.GetResponseConfig.speaker)
}
inline std::string* GetResponseRequest_GetResponseConfig::mutable_speaker() {
  // @@protoc_insertion_point(field_mutable:service.GetResponseRequest.GetResponseConfig.speaker)
  return _internal_mutable_speaker();
}
inline const std::string& GetResponseRequest_GetResponseConfig::_internal_speaker() const {
  return speaker_.Get();
}
inline void GetResponseRequest_GetResponseConfig::_internal_set_speaker(const std::string& value) {
  
  speaker_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetResponseRequest_GetResponseConfig::set_speaker(std::string&& value) {
  
  speaker_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service.GetResponseRequest.GetResponseConfig.speaker)
}
inline void GetResponseRequest_GetResponseConfig::set_speaker(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  speaker_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:service.GetResponseRequest.GetResponseConfig.speaker)
}
inline void GetResponseRequest_GetResponseConfig::set_speaker(const char* value,
    size_t size) {
  
  speaker_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service.GetResponseRequest.GetResponseConfig.speaker)
}
inline std::string* GetResponseRequest_GetResponseConfig::_internal_mutable_speaker() {
  
  return speaker_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetResponseRequest_GetResponseConfig::release_speaker() {
  // @@protoc_insertion_point(field_release:service.GetResponseRequest.GetResponseConfig.speaker)
  return speaker_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetResponseRequest_GetResponseConfig::set_allocated_speaker(std::string* speaker) {
  if (speaker != nullptr) {
    
  } else {
    
  }
  speaker_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), speaker,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service.GetResponseRequest.GetResponseConfig.speaker)
}

// -------------------------------------------------------------------

// GetResponseRequest_GetResponseData

// bytes audio_data = 1;
inline bool GetResponseRequest_GetResponseData::_internal_has_audio_data() const {
  return input_type_case() == kAudioData;
}
inline void GetResponseRequest_GetResponseData::set_has_audio_data() {
  _oneof_case_[0] = kAudioData;
}
inline void GetResponseRequest_GetResponseData::clear_audio_data() {
  if (_internal_has_audio_data()) {
    input_type_.audio_data_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_input_type();
  }
}
inline const std::string& GetResponseRequest_GetResponseData::audio_data() const {
  // @@protoc_insertion_point(field_get:service.GetResponseRequest.GetResponseData.audio_data)
  return _internal_audio_data();
}
inline void GetResponseRequest_GetResponseData::set_audio_data(const std::string& value) {
  _internal_set_audio_data(value);
  // @@protoc_insertion_point(field_set:service.GetResponseRequest.GetResponseData.audio_data)
}
inline std::string* GetResponseRequest_GetResponseData::mutable_audio_data() {
  // @@protoc_insertion_point(field_mutable:service.GetResponseRequest.GetResponseData.audio_data)
  return _internal_mutable_audio_data();
}
inline const std::string& GetResponseRequest_GetResponseData::_internal_audio_data() const {
  if (_internal_has_audio_data()) {
    return input_type_.audio_data_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void GetResponseRequest_GetResponseData::_internal_set_audio_data(const std::string& value) {
  if (!_internal_has_audio_data()) {
    clear_input_type();
    set_has_audio_data();
    input_type_.audio_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  input_type_.audio_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetResponseRequest_GetResponseData::set_audio_data(std::string&& value) {
  // @@protoc_insertion_point(field_set:service.GetResponseRequest.GetResponseData.audio_data)
  if (!_internal_has_audio_data()) {
    clear_input_type();
    set_has_audio_data();
    input_type_.audio_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  input_type_.audio_data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service.GetResponseRequest.GetResponseData.audio_data)
}
inline void GetResponseRequest_GetResponseData::set_audio_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_audio_data()) {
    clear_input_type();
    set_has_audio_data();
    input_type_.audio_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  input_type_.audio_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:service.GetResponseRequest.GetResponseData.audio_data)
}
inline void GetResponseRequest_GetResponseData::set_audio_data(const void* value,
                             size_t size) {
  if (!_internal_has_audio_data()) {
    clear_input_type();
    set_has_audio_data();
    input_type_.audio_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  input_type_.audio_data_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:service.GetResponseRequest.GetResponseData.audio_data)
}
inline std::string* GetResponseRequest_GetResponseData::_internal_mutable_audio_data() {
  if (!_internal_has_audio_data()) {
    clear_input_type();
    set_has_audio_data();
    input_type_.audio_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return input_type_.audio_data_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetResponseRequest_GetResponseData::release_audio_data() {
  // @@protoc_insertion_point(field_release:service.GetResponseRequest.GetResponseData.audio_data)
  if (_internal_has_audio_data()) {
    clear_has_input_type();
    return input_type_.audio_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void GetResponseRequest_GetResponseData::set_allocated_audio_data(std::string* audio_data) {
  if (has_input_type()) {
    clear_input_type();
  }
  if (audio_data != nullptr) {
    set_has_audio_data();
    input_type_.audio_data_.UnsafeSetDefault(audio_data);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(audio_data);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:service.GetResponseRequest.GetResponseData.audio_data)
}

// string text_data = 2;
inline bool GetResponseRequest_GetResponseData::_internal_has_text_data() const {
  return input_type_case() == kTextData;
}
inline void GetResponseRequest_GetResponseData::set_has_text_data() {
  _oneof_case_[0] = kTextData;
}
inline void GetResponseRequest_GetResponseData::clear_text_data() {
  if (_internal_has_text_data()) {
    input_type_.text_data_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_input_type();
  }
}
inline const std::string& GetResponseRequest_GetResponseData::text_data() const {
  // @@protoc_insertion_point(field_get:service.GetResponseRequest.GetResponseData.text_data)
  return _internal_text_data();
}
inline void GetResponseRequest_GetResponseData::set_text_data(const std::string& value) {
  _internal_set_text_data(value);
  // @@protoc_insertion_point(field_set:service.GetResponseRequest.GetResponseData.text_data)
}
inline std::string* GetResponseRequest_GetResponseData::mutable_text_data() {
  // @@protoc_insertion_point(field_mutable:service.GetResponseRequest.GetResponseData.text_data)
  return _internal_mutable_text_data();
}
inline const std::string& GetResponseRequest_GetResponseData::_internal_text_data() const {
  if (_internal_has_text_data()) {
    return input_type_.text_data_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void GetResponseRequest_GetResponseData::_internal_set_text_data(const std::string& value) {
  if (!_internal_has_text_data()) {
    clear_input_type();
    set_has_text_data();
    input_type_.text_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  input_type_.text_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetResponseRequest_GetResponseData::set_text_data(std::string&& value) {
  // @@protoc_insertion_point(field_set:service.GetResponseRequest.GetResponseData.text_data)
  if (!_internal_has_text_data()) {
    clear_input_type();
    set_has_text_data();
    input_type_.text_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  input_type_.text_data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service.GetResponseRequest.GetResponseData.text_data)
}
inline void GetResponseRequest_GetResponseData::set_text_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_text_data()) {
    clear_input_type();
    set_has_text_data();
    input_type_.text_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  input_type_.text_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:service.GetResponseRequest.GetResponseData.text_data)
}
inline void GetResponseRequest_GetResponseData::set_text_data(const char* value,
                             size_t size) {
  if (!_internal_has_text_data()) {
    clear_input_type();
    set_has_text_data();
    input_type_.text_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  input_type_.text_data_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:service.GetResponseRequest.GetResponseData.text_data)
}
inline std::string* GetResponseRequest_GetResponseData::_internal_mutable_text_data() {
  if (!_internal_has_text_data()) {
    clear_input_type();
    set_has_text_data();
    input_type_.text_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return input_type_.text_data_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetResponseRequest_GetResponseData::release_text_data() {
  // @@protoc_insertion_point(field_release:service.GetResponseRequest.GetResponseData.text_data)
  if (_internal_has_text_data()) {
    clear_has_input_type();
    return input_type_.text_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void GetResponseRequest_GetResponseData::set_allocated_text_data(std::string* text_data) {
  if (has_input_type()) {
    clear_input_type();
  }
  if (text_data != nullptr) {
    set_has_text_data();
    input_type_.text_data_.UnsafeSetDefault(text_data);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(text_data);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:service.GetResponseRequest.GetResponseData.text_data)
}

inline bool GetResponseRequest_GetResponseData::has_input_type() const {
  return input_type_case() != INPUT_TYPE_NOT_SET;
}
inline void GetResponseRequest_GetResponseData::clear_has_input_type() {
  _oneof_case_[0] = INPUT_TYPE_NOT_SET;
}
inline GetResponseRequest_GetResponseData::InputTypeCase GetResponseRequest_GetResponseData::input_type_case() const {
  return GetResponseRequest_GetResponseData::InputTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GetResponseRequest

// .service.GetResponseRequest.GetResponseConfig get_response_config = 1;
inline bool GetResponseRequest::_internal_has_get_response_config() const {
  return request_type_case() == kGetResponseConfig;
}
inline bool GetResponseRequest::has_get_response_config() const {
  return _internal_has_get_response_config();
}
inline void GetResponseRequest::set_has_get_response_config() {
  _oneof_case_[0] = kGetResponseConfig;
}
inline void GetResponseRequest::clear_get_response_config() {
  if (_internal_has_get_response_config()) {
    if (GetArena() == nullptr) {
      delete request_type_.get_response_config_;
    }
    clear_has_request_type();
  }
}
inline ::service::GetResponseRequest_GetResponseConfig* GetResponseRequest::release_get_response_config() {
  // @@protoc_insertion_point(field_release:service.GetResponseRequest.get_response_config)
  if (_internal_has_get_response_config()) {
    clear_has_request_type();
      ::service::GetResponseRequest_GetResponseConfig* temp = request_type_.get_response_config_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.get_response_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service::GetResponseRequest_GetResponseConfig& GetResponseRequest::_internal_get_response_config() const {
  return _internal_has_get_response_config()
      ? *request_type_.get_response_config_
      : reinterpret_cast< ::service::GetResponseRequest_GetResponseConfig&>(::service::_GetResponseRequest_GetResponseConfig_default_instance_);
}
inline const ::service::GetResponseRequest_GetResponseConfig& GetResponseRequest::get_response_config() const {
  // @@protoc_insertion_point(field_get:service.GetResponseRequest.get_response_config)
  return _internal_get_response_config();
}
inline ::service::GetResponseRequest_GetResponseConfig* GetResponseRequest::unsafe_arena_release_get_response_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service.GetResponseRequest.get_response_config)
  if (_internal_has_get_response_config()) {
    clear_has_request_type();
    ::service::GetResponseRequest_GetResponseConfig* temp = request_type_.get_response_config_;
    request_type_.get_response_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GetResponseRequest::unsafe_arena_set_allocated_get_response_config(::service::GetResponseRequest_GetResponseConfig* get_response_config) {
  clear_request_type();
  if (get_response_config) {
    set_has_get_response_config();
    request_type_.get_response_config_ = get_response_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service.GetResponseRequest.get_response_config)
}
inline ::service::GetResponseRequest_GetResponseConfig* GetResponseRequest::_internal_mutable_get_response_config() {
  if (!_internal_has_get_response_config()) {
    clear_request_type();
    set_has_get_response_config();
    request_type_.get_response_config_ = CreateMaybeMessage< ::service::GetResponseRequest_GetResponseConfig >(GetArena());
  }
  return request_type_.get_response_config_;
}
inline ::service::GetResponseRequest_GetResponseConfig* GetResponseRequest::mutable_get_response_config() {
  // @@protoc_insertion_point(field_mutable:service.GetResponseRequest.get_response_config)
  return _internal_mutable_get_response_config();
}

// .service.GetResponseRequest.GetResponseData get_response_data = 2;
inline bool GetResponseRequest::_internal_has_get_response_data() const {
  return request_type_case() == kGetResponseData;
}
inline bool GetResponseRequest::has_get_response_data() const {
  return _internal_has_get_response_data();
}
inline void GetResponseRequest::set_has_get_response_data() {
  _oneof_case_[0] = kGetResponseData;
}
inline void GetResponseRequest::clear_get_response_data() {
  if (_internal_has_get_response_data()) {
    if (GetArena() == nullptr) {
      delete request_type_.get_response_data_;
    }
    clear_has_request_type();
  }
}
inline ::service::GetResponseRequest_GetResponseData* GetResponseRequest::release_get_response_data() {
  // @@protoc_insertion_point(field_release:service.GetResponseRequest.get_response_data)
  if (_internal_has_get_response_data()) {
    clear_has_request_type();
      ::service::GetResponseRequest_GetResponseData* temp = request_type_.get_response_data_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.get_response_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service::GetResponseRequest_GetResponseData& GetResponseRequest::_internal_get_response_data() const {
  return _internal_has_get_response_data()
      ? *request_type_.get_response_data_
      : reinterpret_cast< ::service::GetResponseRequest_GetResponseData&>(::service::_GetResponseRequest_GetResponseData_default_instance_);
}
inline const ::service::GetResponseRequest_GetResponseData& GetResponseRequest::get_response_data() const {
  // @@protoc_insertion_point(field_get:service.GetResponseRequest.get_response_data)
  return _internal_get_response_data();
}
inline ::service::GetResponseRequest_GetResponseData* GetResponseRequest::unsafe_arena_release_get_response_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service.GetResponseRequest.get_response_data)
  if (_internal_has_get_response_data()) {
    clear_has_request_type();
    ::service::GetResponseRequest_GetResponseData* temp = request_type_.get_response_data_;
    request_type_.get_response_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GetResponseRequest::unsafe_arena_set_allocated_get_response_data(::service::GetResponseRequest_GetResponseData* get_response_data) {
  clear_request_type();
  if (get_response_data) {
    set_has_get_response_data();
    request_type_.get_response_data_ = get_response_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service.GetResponseRequest.get_response_data)
}
inline ::service::GetResponseRequest_GetResponseData* GetResponseRequest::_internal_mutable_get_response_data() {
  if (!_internal_has_get_response_data()) {
    clear_request_type();
    set_has_get_response_data();
    request_type_.get_response_data_ = CreateMaybeMessage< ::service::GetResponseRequest_GetResponseData >(GetArena());
  }
  return request_type_.get_response_data_;
}
inline ::service::GetResponseRequest_GetResponseData* GetResponseRequest::mutable_get_response_data() {
  // @@protoc_insertion_point(field_mutable:service.GetResponseRequest.get_response_data)
  return _internal_mutable_get_response_data();
}

inline bool GetResponseRequest::has_request_type() const {
  return request_type_case() != REQUEST_TYPE_NOT_SET;
}
inline void GetResponseRequest::clear_has_request_type() {
  _oneof_case_[0] = REQUEST_TYPE_NOT_SET;
}
inline GetResponseRequest::RequestTypeCase GetResponseRequest::request_type_case() const {
  return GetResponseRequest::RequestTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GetResponseResponse_AudioResponse

// bytes audio_data = 1;
inline void GetResponseResponse_AudioResponse::clear_audio_data() {
  audio_data_.ClearToEmpty();
}
inline const std::string& GetResponseResponse_AudioResponse::audio_data() const {
  // @@protoc_insertion_point(field_get:service.GetResponseResponse.AudioResponse.audio_data)
  return _internal_audio_data();
}
inline void GetResponseResponse_AudioResponse::set_audio_data(const std::string& value) {
  _internal_set_audio_data(value);
  // @@protoc_insertion_point(field_set:service.GetResponseResponse.AudioResponse.audio_data)
}
inline std::string* GetResponseResponse_AudioResponse::mutable_audio_data() {
  // @@protoc_insertion_point(field_mutable:service.GetResponseResponse.AudioResponse.audio_data)
  return _internal_mutable_audio_data();
}
inline const std::string& GetResponseResponse_AudioResponse::_internal_audio_data() const {
  return audio_data_.Get();
}
inline void GetResponseResponse_AudioResponse::_internal_set_audio_data(const std::string& value) {
  
  audio_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetResponseResponse_AudioResponse::set_audio_data(std::string&& value) {
  
  audio_data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service.GetResponseResponse.AudioResponse.audio_data)
}
inline void GetResponseResponse_AudioResponse::set_audio_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  audio_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:service.GetResponseResponse.AudioResponse.audio_data)
}
inline void GetResponseResponse_AudioResponse::set_audio_data(const void* value,
    size_t size) {
  
  audio_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service.GetResponseResponse.AudioResponse.audio_data)
}
inline std::string* GetResponseResponse_AudioResponse::_internal_mutable_audio_data() {
  
  return audio_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetResponseResponse_AudioResponse::release_audio_data() {
  // @@protoc_insertion_point(field_release:service.GetResponseResponse.AudioResponse.audio_data)
  return audio_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetResponseResponse_AudioResponse::set_allocated_audio_data(std::string* audio_data) {
  if (audio_data != nullptr) {
    
  } else {
    
  }
  audio_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), audio_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service.GetResponseResponse.AudioResponse.audio_data)
}

// .service.AudioConfig audio_config = 2;
inline bool GetResponseResponse_AudioResponse::_internal_has_audio_config() const {
  return this != internal_default_instance() && audio_config_ != nullptr;
}
inline bool GetResponseResponse_AudioResponse::has_audio_config() const {
  return _internal_has_audio_config();
}
inline void GetResponseResponse_AudioResponse::clear_audio_config() {
  if (GetArena() == nullptr && audio_config_ != nullptr) {
    delete audio_config_;
  }
  audio_config_ = nullptr;
}
inline const ::service::AudioConfig& GetResponseResponse_AudioResponse::_internal_audio_config() const {
  const ::service::AudioConfig* p = audio_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::service::AudioConfig&>(
      ::service::_AudioConfig_default_instance_);
}
inline const ::service::AudioConfig& GetResponseResponse_AudioResponse::audio_config() const {
  // @@protoc_insertion_point(field_get:service.GetResponseResponse.AudioResponse.audio_config)
  return _internal_audio_config();
}
inline void GetResponseResponse_AudioResponse::unsafe_arena_set_allocated_audio_config(
    ::service::AudioConfig* audio_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(audio_config_);
  }
  audio_config_ = audio_config;
  if (audio_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service.GetResponseResponse.AudioResponse.audio_config)
}
inline ::service::AudioConfig* GetResponseResponse_AudioResponse::release_audio_config() {
  
  ::service::AudioConfig* temp = audio_config_;
  audio_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::service::AudioConfig* GetResponseResponse_AudioResponse::unsafe_arena_release_audio_config() {
  // @@protoc_insertion_point(field_release:service.GetResponseResponse.AudioResponse.audio_config)
  
  ::service::AudioConfig* temp = audio_config_;
  audio_config_ = nullptr;
  return temp;
}
inline ::service::AudioConfig* GetResponseResponse_AudioResponse::_internal_mutable_audio_config() {
  
  if (audio_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::service::AudioConfig>(GetArena());
    audio_config_ = p;
  }
  return audio_config_;
}
inline ::service::AudioConfig* GetResponseResponse_AudioResponse::mutable_audio_config() {
  // @@protoc_insertion_point(field_mutable:service.GetResponseResponse.AudioResponse.audio_config)
  return _internal_mutable_audio_config();
}
inline void GetResponseResponse_AudioResponse::set_allocated_audio_config(::service::AudioConfig* audio_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete audio_config_;
  }
  if (audio_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(audio_config);
    if (message_arena != submessage_arena) {
      audio_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio_config, submessage_arena);
    }
    
  } else {
    
  }
  audio_config_ = audio_config;
  // @@protoc_insertion_point(field_set_allocated:service.GetResponseResponse.AudioResponse.audio_config)
}

// string text_data = 3;
inline void GetResponseResponse_AudioResponse::clear_text_data() {
  text_data_.ClearToEmpty();
}
inline const std::string& GetResponseResponse_AudioResponse::text_data() const {
  // @@protoc_insertion_point(field_get:service.GetResponseResponse.AudioResponse.text_data)
  return _internal_text_data();
}
inline void GetResponseResponse_AudioResponse::set_text_data(const std::string& value) {
  _internal_set_text_data(value);
  // @@protoc_insertion_point(field_set:service.GetResponseResponse.AudioResponse.text_data)
}
inline std::string* GetResponseResponse_AudioResponse::mutable_text_data() {
  // @@protoc_insertion_point(field_mutable:service.GetResponseResponse.AudioResponse.text_data)
  return _internal_mutable_text_data();
}
inline const std::string& GetResponseResponse_AudioResponse::_internal_text_data() const {
  return text_data_.Get();
}
inline void GetResponseResponse_AudioResponse::_internal_set_text_data(const std::string& value) {
  
  text_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetResponseResponse_AudioResponse::set_text_data(std::string&& value) {
  
  text_data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service.GetResponseResponse.AudioResponse.text_data)
}
inline void GetResponseResponse_AudioResponse::set_text_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:service.GetResponseResponse.AudioResponse.text_data)
}
inline void GetResponseResponse_AudioResponse::set_text_data(const char* value,
    size_t size) {
  
  text_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service.GetResponseResponse.AudioResponse.text_data)
}
inline std::string* GetResponseResponse_AudioResponse::_internal_mutable_text_data() {
  
  return text_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetResponseResponse_AudioResponse::release_text_data() {
  // @@protoc_insertion_point(field_release:service.GetResponseResponse.AudioResponse.text_data)
  return text_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetResponseResponse_AudioResponse::set_allocated_text_data(std::string* text_data) {
  if (text_data != nullptr) {
    
  } else {
    
  }
  text_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service.GetResponseResponse.AudioResponse.text_data)
}

// bool end_of_response = 4;
inline void GetResponseResponse_AudioResponse::clear_end_of_response() {
  end_of_response_ = false;
}
inline bool GetResponseResponse_AudioResponse::_internal_end_of_response() const {
  return end_of_response_;
}
inline bool GetResponseResponse_AudioResponse::end_of_response() const {
  // @@protoc_insertion_point(field_get:service.GetResponseResponse.AudioResponse.end_of_response)
  return _internal_end_of_response();
}
inline void GetResponseResponse_AudioResponse::_internal_set_end_of_response(bool value) {
  
  end_of_response_ = value;
}
inline void GetResponseResponse_AudioResponse::set_end_of_response(bool value) {
  _internal_set_end_of_response(value);
  // @@protoc_insertion_point(field_set:service.GetResponseResponse.AudioResponse.end_of_response)
}

// -------------------------------------------------------------------

// GetResponseResponse_ActionResponse

// string action = 1;
inline void GetResponseResponse_ActionResponse::clear_action() {
  action_.ClearToEmpty();
}
inline const std::string& GetResponseResponse_ActionResponse::action() const {
  // @@protoc_insertion_point(field_get:service.GetResponseResponse.ActionResponse.action)
  return _internal_action();
}
inline void GetResponseResponse_ActionResponse::set_action(const std::string& value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:service.GetResponseResponse.ActionResponse.action)
}
inline std::string* GetResponseResponse_ActionResponse::mutable_action() {
  // @@protoc_insertion_point(field_mutable:service.GetResponseResponse.ActionResponse.action)
  return _internal_mutable_action();
}
inline const std::string& GetResponseResponse_ActionResponse::_internal_action() const {
  return action_.Get();
}
inline void GetResponseResponse_ActionResponse::_internal_set_action(const std::string& value) {
  
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetResponseResponse_ActionResponse::set_action(std::string&& value) {
  
  action_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service.GetResponseResponse.ActionResponse.action)
}
inline void GetResponseResponse_ActionResponse::set_action(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:service.GetResponseResponse.ActionResponse.action)
}
inline void GetResponseResponse_ActionResponse::set_action(const char* value,
    size_t size) {
  
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service.GetResponseResponse.ActionResponse.action)
}
inline std::string* GetResponseResponse_ActionResponse::_internal_mutable_action() {
  
  return action_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetResponseResponse_ActionResponse::release_action() {
  // @@protoc_insertion_point(field_release:service.GetResponseResponse.ActionResponse.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetResponseResponse_ActionResponse::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service.GetResponseResponse.ActionResponse.action)
}

// -------------------------------------------------------------------

// GetResponseResponse_UserTranscript

// string text_data = 1;
inline void GetResponseResponse_UserTranscript::clear_text_data() {
  text_data_.ClearToEmpty();
}
inline const std::string& GetResponseResponse_UserTranscript::text_data() const {
  // @@protoc_insertion_point(field_get:service.GetResponseResponse.UserTranscript.text_data)
  return _internal_text_data();
}
inline void GetResponseResponse_UserTranscript::set_text_data(const std::string& value) {
  _internal_set_text_data(value);
  // @@protoc_insertion_point(field_set:service.GetResponseResponse.UserTranscript.text_data)
}
inline std::string* GetResponseResponse_UserTranscript::mutable_text_data() {
  // @@protoc_insertion_point(field_mutable:service.GetResponseResponse.UserTranscript.text_data)
  return _internal_mutable_text_data();
}
inline const std::string& GetResponseResponse_UserTranscript::_internal_text_data() const {
  return text_data_.Get();
}
inline void GetResponseResponse_UserTranscript::_internal_set_text_data(const std::string& value) {
  
  text_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetResponseResponse_UserTranscript::set_text_data(std::string&& value) {
  
  text_data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service.GetResponseResponse.UserTranscript.text_data)
}
inline void GetResponseResponse_UserTranscript::set_text_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:service.GetResponseResponse.UserTranscript.text_data)
}
inline void GetResponseResponse_UserTranscript::set_text_data(const char* value,
    size_t size) {
  
  text_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service.GetResponseResponse.UserTranscript.text_data)
}
inline std::string* GetResponseResponse_UserTranscript::_internal_mutable_text_data() {
  
  return text_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetResponseResponse_UserTranscript::release_text_data() {
  // @@protoc_insertion_point(field_release:service.GetResponseResponse.UserTranscript.text_data)
  return text_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetResponseResponse_UserTranscript::set_allocated_text_data(std::string* text_data) {
  if (text_data != nullptr) {
    
  } else {
    
  }
  text_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service.GetResponseResponse.UserTranscript.text_data)
}

// bool is_final = 2;
inline void GetResponseResponse_UserTranscript::clear_is_final() {
  is_final_ = false;
}
inline bool GetResponseResponse_UserTranscript::_internal_is_final() const {
  return is_final_;
}
inline bool GetResponseResponse_UserTranscript::is_final() const {
  // @@protoc_insertion_point(field_get:service.GetResponseResponse.UserTranscript.is_final)
  return _internal_is_final();
}
inline void GetResponseResponse_UserTranscript::_internal_set_is_final(bool value) {
  
  is_final_ = value;
}
inline void GetResponseResponse_UserTranscript::set_is_final(bool value) {
  _internal_set_is_final(value);
  // @@protoc_insertion_point(field_set:service.GetResponseResponse.UserTranscript.is_final)
}

// bool end_of_response = 3;
inline void GetResponseResponse_UserTranscript::clear_end_of_response() {
  end_of_response_ = false;
}
inline bool GetResponseResponse_UserTranscript::_internal_end_of_response() const {
  return end_of_response_;
}
inline bool GetResponseResponse_UserTranscript::end_of_response() const {
  // @@protoc_insertion_point(field_get:service.GetResponseResponse.UserTranscript.end_of_response)
  return _internal_end_of_response();
}
inline void GetResponseResponse_UserTranscript::_internal_set_end_of_response(bool value) {
  
  end_of_response_ = value;
}
inline void GetResponseResponse_UserTranscript::set_end_of_response(bool value) {
  _internal_set_end_of_response(value);
  // @@protoc_insertion_point(field_set:service.GetResponseResponse.UserTranscript.end_of_response)
}

// -------------------------------------------------------------------

// GetResponseResponse

// string session_id = 1;
inline void GetResponseResponse::clear_session_id() {
  session_id_.ClearToEmpty();
}
inline const std::string& GetResponseResponse::session_id() const {
  // @@protoc_insertion_point(field_get:service.GetResponseResponse.session_id)
  return _internal_session_id();
}
inline void GetResponseResponse::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:service.GetResponseResponse.session_id)
}
inline std::string* GetResponseResponse::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:service.GetResponseResponse.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& GetResponseResponse::_internal_session_id() const {
  return session_id_.Get();
}
inline void GetResponseResponse::_internal_set_session_id(const std::string& value) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetResponseResponse::set_session_id(std::string&& value) {
  
  session_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service.GetResponseResponse.session_id)
}
inline void GetResponseResponse::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:service.GetResponseResponse.session_id)
}
inline void GetResponseResponse::set_session_id(const char* value,
    size_t size) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service.GetResponseResponse.session_id)
}
inline std::string* GetResponseResponse::_internal_mutable_session_id() {
  
  return session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetResponseResponse::release_session_id() {
  // @@protoc_insertion_point(field_release:service.GetResponseResponse.session_id)
  return session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetResponseResponse::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service.GetResponseResponse.session_id)
}

// .service.GetResponseResponse.ActionResponse action_response = 2;
inline bool GetResponseResponse::_internal_has_action_response() const {
  return response_type_case() == kActionResponse;
}
inline bool GetResponseResponse::has_action_response() const {
  return _internal_has_action_response();
}
inline void GetResponseResponse::set_has_action_response() {
  _oneof_case_[0] = kActionResponse;
}
inline void GetResponseResponse::clear_action_response() {
  if (_internal_has_action_response()) {
    if (GetArena() == nullptr) {
      delete response_type_.action_response_;
    }
    clear_has_response_type();
  }
}
inline ::service::GetResponseResponse_ActionResponse* GetResponseResponse::release_action_response() {
  // @@protoc_insertion_point(field_release:service.GetResponseResponse.action_response)
  if (_internal_has_action_response()) {
    clear_has_response_type();
      ::service::GetResponseResponse_ActionResponse* temp = response_type_.action_response_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_type_.action_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service::GetResponseResponse_ActionResponse& GetResponseResponse::_internal_action_response() const {
  return _internal_has_action_response()
      ? *response_type_.action_response_
      : reinterpret_cast< ::service::GetResponseResponse_ActionResponse&>(::service::_GetResponseResponse_ActionResponse_default_instance_);
}
inline const ::service::GetResponseResponse_ActionResponse& GetResponseResponse::action_response() const {
  // @@protoc_insertion_point(field_get:service.GetResponseResponse.action_response)
  return _internal_action_response();
}
inline ::service::GetResponseResponse_ActionResponse* GetResponseResponse::unsafe_arena_release_action_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service.GetResponseResponse.action_response)
  if (_internal_has_action_response()) {
    clear_has_response_type();
    ::service::GetResponseResponse_ActionResponse* temp = response_type_.action_response_;
    response_type_.action_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GetResponseResponse::unsafe_arena_set_allocated_action_response(::service::GetResponseResponse_ActionResponse* action_response) {
  clear_response_type();
  if (action_response) {
    set_has_action_response();
    response_type_.action_response_ = action_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service.GetResponseResponse.action_response)
}
inline ::service::GetResponseResponse_ActionResponse* GetResponseResponse::_internal_mutable_action_response() {
  if (!_internal_has_action_response()) {
    clear_response_type();
    set_has_action_response();
    response_type_.action_response_ = CreateMaybeMessage< ::service::GetResponseResponse_ActionResponse >(GetArena());
  }
  return response_type_.action_response_;
}
inline ::service::GetResponseResponse_ActionResponse* GetResponseResponse::mutable_action_response() {
  // @@protoc_insertion_point(field_mutable:service.GetResponseResponse.action_response)
  return _internal_mutable_action_response();
}

// .service.GetResponseResponse.AudioResponse audio_response = 3;
inline bool GetResponseResponse::_internal_has_audio_response() const {
  return response_type_case() == kAudioResponse;
}
inline bool GetResponseResponse::has_audio_response() const {
  return _internal_has_audio_response();
}
inline void GetResponseResponse::set_has_audio_response() {
  _oneof_case_[0] = kAudioResponse;
}
inline void GetResponseResponse::clear_audio_response() {
  if (_internal_has_audio_response()) {
    if (GetArena() == nullptr) {
      delete response_type_.audio_response_;
    }
    clear_has_response_type();
  }
}
inline ::service::GetResponseResponse_AudioResponse* GetResponseResponse::release_audio_response() {
  // @@protoc_insertion_point(field_release:service.GetResponseResponse.audio_response)
  if (_internal_has_audio_response()) {
    clear_has_response_type();
      ::service::GetResponseResponse_AudioResponse* temp = response_type_.audio_response_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_type_.audio_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service::GetResponseResponse_AudioResponse& GetResponseResponse::_internal_audio_response() const {
  return _internal_has_audio_response()
      ? *response_type_.audio_response_
      : reinterpret_cast< ::service::GetResponseResponse_AudioResponse&>(::service::_GetResponseResponse_AudioResponse_default_instance_);
}
inline const ::service::GetResponseResponse_AudioResponse& GetResponseResponse::audio_response() const {
  // @@protoc_insertion_point(field_get:service.GetResponseResponse.audio_response)
  return _internal_audio_response();
}
inline ::service::GetResponseResponse_AudioResponse* GetResponseResponse::unsafe_arena_release_audio_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service.GetResponseResponse.audio_response)
  if (_internal_has_audio_response()) {
    clear_has_response_type();
    ::service::GetResponseResponse_AudioResponse* temp = response_type_.audio_response_;
    response_type_.audio_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GetResponseResponse::unsafe_arena_set_allocated_audio_response(::service::GetResponseResponse_AudioResponse* audio_response) {
  clear_response_type();
  if (audio_response) {
    set_has_audio_response();
    response_type_.audio_response_ = audio_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service.GetResponseResponse.audio_response)
}
inline ::service::GetResponseResponse_AudioResponse* GetResponseResponse::_internal_mutable_audio_response() {
  if (!_internal_has_audio_response()) {
    clear_response_type();
    set_has_audio_response();
    response_type_.audio_response_ = CreateMaybeMessage< ::service::GetResponseResponse_AudioResponse >(GetArena());
  }
  return response_type_.audio_response_;
}
inline ::service::GetResponseResponse_AudioResponse* GetResponseResponse::mutable_audio_response() {
  // @@protoc_insertion_point(field_mutable:service.GetResponseResponse.audio_response)
  return _internal_mutable_audio_response();
}

// string debug_log = 4;
inline bool GetResponseResponse::_internal_has_debug_log() const {
  return response_type_case() == kDebugLog;
}
inline void GetResponseResponse::set_has_debug_log() {
  _oneof_case_[0] = kDebugLog;
}
inline void GetResponseResponse::clear_debug_log() {
  if (_internal_has_debug_log()) {
    response_type_.debug_log_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_response_type();
  }
}
inline const std::string& GetResponseResponse::debug_log() const {
  // @@protoc_insertion_point(field_get:service.GetResponseResponse.debug_log)
  return _internal_debug_log();
}
inline void GetResponseResponse::set_debug_log(const std::string& value) {
  _internal_set_debug_log(value);
  // @@protoc_insertion_point(field_set:service.GetResponseResponse.debug_log)
}
inline std::string* GetResponseResponse::mutable_debug_log() {
  // @@protoc_insertion_point(field_mutable:service.GetResponseResponse.debug_log)
  return _internal_mutable_debug_log();
}
inline const std::string& GetResponseResponse::_internal_debug_log() const {
  if (_internal_has_debug_log()) {
    return response_type_.debug_log_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void GetResponseResponse::_internal_set_debug_log(const std::string& value) {
  if (!_internal_has_debug_log()) {
    clear_response_type();
    set_has_debug_log();
    response_type_.debug_log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  response_type_.debug_log_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetResponseResponse::set_debug_log(std::string&& value) {
  // @@protoc_insertion_point(field_set:service.GetResponseResponse.debug_log)
  if (!_internal_has_debug_log()) {
    clear_response_type();
    set_has_debug_log();
    response_type_.debug_log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  response_type_.debug_log_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service.GetResponseResponse.debug_log)
}
inline void GetResponseResponse::set_debug_log(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_debug_log()) {
    clear_response_type();
    set_has_debug_log();
    response_type_.debug_log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  response_type_.debug_log_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:service.GetResponseResponse.debug_log)
}
inline void GetResponseResponse::set_debug_log(const char* value,
                             size_t size) {
  if (!_internal_has_debug_log()) {
    clear_response_type();
    set_has_debug_log();
    response_type_.debug_log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  response_type_.debug_log_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:service.GetResponseResponse.debug_log)
}
inline std::string* GetResponseResponse::_internal_mutable_debug_log() {
  if (!_internal_has_debug_log()) {
    clear_response_type();
    set_has_debug_log();
    response_type_.debug_log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return response_type_.debug_log_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetResponseResponse::release_debug_log() {
  // @@protoc_insertion_point(field_release:service.GetResponseResponse.debug_log)
  if (_internal_has_debug_log()) {
    clear_has_response_type();
    return response_type_.debug_log_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void GetResponseResponse::set_allocated_debug_log(std::string* debug_log) {
  if (has_response_type()) {
    clear_response_type();
  }
  if (debug_log != nullptr) {
    set_has_debug_log();
    response_type_.debug_log_.UnsafeSetDefault(debug_log);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(debug_log);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:service.GetResponseResponse.debug_log)
}

// .service.GetResponseResponse.UserTranscript user_query = 5;
inline bool GetResponseResponse::_internal_has_user_query() const {
  return response_type_case() == kUserQuery;
}
inline bool GetResponseResponse::has_user_query() const {
  return _internal_has_user_query();
}
inline void GetResponseResponse::set_has_user_query() {
  _oneof_case_[0] = kUserQuery;
}
inline void GetResponseResponse::clear_user_query() {
  if (_internal_has_user_query()) {
    if (GetArena() == nullptr) {
      delete response_type_.user_query_;
    }
    clear_has_response_type();
  }
}
inline ::service::GetResponseResponse_UserTranscript* GetResponseResponse::release_user_query() {
  // @@protoc_insertion_point(field_release:service.GetResponseResponse.user_query)
  if (_internal_has_user_query()) {
    clear_has_response_type();
      ::service::GetResponseResponse_UserTranscript* temp = response_type_.user_query_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_type_.user_query_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service::GetResponseResponse_UserTranscript& GetResponseResponse::_internal_user_query() const {
  return _internal_has_user_query()
      ? *response_type_.user_query_
      : reinterpret_cast< ::service::GetResponseResponse_UserTranscript&>(::service::_GetResponseResponse_UserTranscript_default_instance_);
}
inline const ::service::GetResponseResponse_UserTranscript& GetResponseResponse::user_query() const {
  // @@protoc_insertion_point(field_get:service.GetResponseResponse.user_query)
  return _internal_user_query();
}
inline ::service::GetResponseResponse_UserTranscript* GetResponseResponse::unsafe_arena_release_user_query() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service.GetResponseResponse.user_query)
  if (_internal_has_user_query()) {
    clear_has_response_type();
    ::service::GetResponseResponse_UserTranscript* temp = response_type_.user_query_;
    response_type_.user_query_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GetResponseResponse::unsafe_arena_set_allocated_user_query(::service::GetResponseResponse_UserTranscript* user_query) {
  clear_response_type();
  if (user_query) {
    set_has_user_query();
    response_type_.user_query_ = user_query;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service.GetResponseResponse.user_query)
}
inline ::service::GetResponseResponse_UserTranscript* GetResponseResponse::_internal_mutable_user_query() {
  if (!_internal_has_user_query()) {
    clear_response_type();
    set_has_user_query();
    response_type_.user_query_ = CreateMaybeMessage< ::service::GetResponseResponse_UserTranscript >(GetArena());
  }
  return response_type_.user_query_;
}
inline ::service::GetResponseResponse_UserTranscript* GetResponseResponse::mutable_user_query() {
  // @@protoc_insertion_point(field_mutable:service.GetResponseResponse.user_query)
  return _internal_mutable_user_query();
}

inline bool GetResponseResponse::has_response_type() const {
  return response_type_case() != RESPONSE_TYPE_NOT_SET;
}
inline void GetResponseResponse::clear_has_response_type() {
  _oneof_case_[0] = RESPONSE_TYPE_NOT_SET;
}
inline GetResponseResponse::ResponseTypeCase GetResponseResponse::response_type_case() const {
  return GetResponseResponse::ResponseTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// HelloRequest

// string name = 1;
inline void HelloRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& HelloRequest::name() const {
  // @@protoc_insertion_point(field_get:service.HelloRequest.name)
  return _internal_name();
}
inline void HelloRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:service.HelloRequest.name)
}
inline std::string* HelloRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:service.HelloRequest.name)
  return _internal_mutable_name();
}
inline const std::string& HelloRequest::_internal_name() const {
  return name_.Get();
}
inline void HelloRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void HelloRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service.HelloRequest.name)
}
inline void HelloRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:service.HelloRequest.name)
}
inline void HelloRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service.HelloRequest.name)
}
inline std::string* HelloRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HelloRequest::release_name() {
  // @@protoc_insertion_point(field_release:service.HelloRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HelloRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service.HelloRequest.name)
}

// -------------------------------------------------------------------

// HelloResponse

// string message = 1;
inline void HelloResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& HelloResponse::message() const {
  // @@protoc_insertion_point(field_get:service.HelloResponse.message)
  return _internal_message();
}
inline void HelloResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:service.HelloResponse.message)
}
inline std::string* HelloResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:service.HelloResponse.message)
  return _internal_mutable_message();
}
inline const std::string& HelloResponse::_internal_message() const {
  return message_.Get();
}
inline void HelloResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void HelloResponse::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service.HelloResponse.message)
}
inline void HelloResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:service.HelloResponse.message)
}
inline void HelloResponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service.HelloResponse.message)
}
inline std::string* HelloResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HelloResponse::release_message() {
  // @@protoc_insertion_point(field_release:service.HelloResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HelloResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service.HelloResponse.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace service

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_service_2eproto
